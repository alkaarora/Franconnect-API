{
  "openapi": "3.0.0",
  "info": {
    "description": "",
    "version": "1.0",
    "title": "FranConnect API"
  },
  "tags": [
    {
      "name": "Introduction",
      "description": "<p>Managing a Franchisee System requires that all the users have access to timely and reliable information that is appropriate for their role. Yet, crucial information can be siloed in disparate applications limiting the ability to get a complete view across the entire franchisee and reduces the efficiency of the users performing their daily tasks. Getting a collection of enterprise applications to effectively work together can tie-up the IT resources needed to develop and maintain an integrated solution or perhaps is outside the core capabilities of the organization. To help meet this need while addressing the challenge, FranConnect offers several options for integrating FranConnect Sky with other business softwares.</p><p><h4 class=\"western\">Off-the Shelf Integrations</h4>A number of popular third-party business applications are available for integration with your FranConnect Sky system. Using FranConnect-provided, pre-built integrations provide additional functionality such as document e-signature, lead assessment, and brand reputation management.</p><p><h4 class=\"western\">FranConnect Delivered Integrations</h4>Customers can also choose to have FranConnect deliver and maintain an integrated solution. Working with the customer to understand their work processes, the applications that need to be integrated, and the desired outcome, FranConnect can propose a solution that best meets the customer’s business requirements.</p><h4 class=\"western\">Customer Initiated Integrations</h4><p>FranConnect makes available documented REST APIs for several Sky application modules. Providing the greatest degree of control, customers can use these APIs to develop and support custom integrations using their own in-house or third-party development resources.</p><h4 class=\"western\">FranConnect API</h4><p>The FranConnect API enables users to import and/or export data between FranConnect Sky and third-party applications. Using this API, you must make all HTTP calls using the standard HTTP POST method in \"x-www-form-urlencoded\" format. You must provide the input to the API as an XML string whereas the output can either be in XML or JSON format, depending on how you would like to receive the response in your application. Various operations can be performed with the API by appending (and, thereby, replacing) variables in the request URL. The FranConnect API supports the following operations: login, subModule, query, create, update, retrieve, delete, log, and logout.</p><p>To perform the create and/ or update operations, you must pass the attributes for the specific record as an xmlString. To perform the retrieve and/ or delete operations, you must specify the parameters and their values in the filterXML. Other parameters that are used to specify the request (such as module name and sub module name) must be appended in the request as URL parameters.</p><h4 class=\"western\">Getting Started</h4><p>Contact the Integrations team <a href=\"mailto:integrations@franconnect.com\">(integrations@franconnect.com)</a> to get the client ID, client secret, and redirect URI that are required to generate the access token.</p><h4 class=\"western\">Supported Modules</h4><p>The API provides access to all entities in the FranConnect system within the Sales(fs), Info Manager(fim), CRM(cm) and the Admin(admin) modules.</p><h4 class=\"western\">Rate Limits and Accounts</h4><p>The FranConnect API does not impose any rate limit restrictions at present, but the users are expected to retrieve data after certain interval and retrieve only the deltas (wherever applicable) so as to not overload the system. Retrieving a large dataset might result in slowness and impede the overall system performance.</p><h4 class=\"western\">Concurrent Requests</h4><p>The FranConnect API does not support concurrent requests and the requests must be made one at a time.</p><h4 class=\"western\">Testing</h4><p>You can perform testing in your UAT environment and then move the code over to your production environment. In case you don’t have a UAT environment, you can request for one from your customer advocate or by sending an email to our HelpDesk team <a href=\"mailto:helpdesk@franconnect.com\">(helpdesk@franconnect.com</a>). A temporary UAT environment can be provided to you, but there might be some cost associated with it.</p><p><span style=\"color: rgb(184, 49, 47);\"><strong>Important!</strong> This document uses <strong>Postman</strong> as the GUI client for testing the FranConnect API. However, you can emulate the API using your preferred programming language.</span></p>"
    },
    {
      "name": "Authentication",
      "description": "<p>Franconnect recommends you to use OAuth 2.0 authorization to authenticate to the FranConnect API.</p><img src=\"images/AuthorizationTab.png\"><p>Perform the following steps to set up the OAuth 2.0 authorization, using the <strong>Postman</strong> GUI client:</p><ol><li>Select an API method.</li><li>Click the <strong>Authorization</strong> tab.&nbsp;</li>  <li>Select the option <strong>OAuth 2.0&nbsp;</strong>for the<strong>&nbsp;Type&nbsp;</strong>field.</li><li>Select the option<strong>&nbsp;</strong><strong>Request Headers</strong> for the <strong>Add authorization data to</strong> field.</li><li>Click <strong>Get New Access Token&nbsp;</strong>to generate request for a new token.</li><img src=\"images/Get-New-Access-Token.png\"><li>In the <strong>Get New Access Token&nbsp;</strong>dialog that appears, enter the details as explained in the following steps.<ol type=\"a\"> <li style=\"margin-left: 1px;\">Enter a name for your Access Token.</li><li style=\"margin-left: 1px;\">Select the <strong>Grant Type</strong> as <strong>Authorization Code</strong>.</li><li style=\"margin-left: 1px;\">Enter the callback URL that you want to be redirected to, once your application is authorized. The callback URL is also known as redirect URI. This URL should match the one that you use during the application registration process.<br>Example: Callback URL can be <a href=\"https%3A//oauth.powerbi.com/views/oauthredirect.html\">https://oauth.powerbi.com/views/oauthredirect.html</a>.<br>To register your callback/redirect URL, contact <a href=\"mailto:integrations@franconnect.com\">integrations@franconnect.com</a></li><li style=\"margin-left: 1px;\">Enter the endpoint for the authorization server as the <strong>Auth URL</strong>. This is used to get the authorization code.<br>Note that the redirect URI is same as the callback URL.<br>Example: Auth URL can be <a href=\"https%3A//auth.franconnectuat.net/userauth/oauth/authorize?response_type=code&amp;client_id=FRANC0NN3CT_API&amp;redirect_uri=https%3A//oauth.powerbi.com/views/oauthredirect.html\">https://auth.franconnectuat.net/userauth/oauth/authorize?response_type=code&amp;client_id=FRANC0NN3CT_API&amp;redirect_uri=https://oauth.powerbi.com/views/oauthredirect.html</a></li><li style=\"margin-left: 1px;\">Enter the endpoint for the authentication server in the <strong>Access Token URL&nbsp;</strong>field. This is used to exchange the authorization code for an access token.<br>Example: Access Token URL can be <a href=\"https%3A//auth.franconnectuat.net/userauth/oauth/token?X-tenantID=developers.franconnectdemo.net&amp;grant_type=authorization_code&amp;client_id=FRANC0NN3CT_API&amp;redirect_uri=https%3A//oauth.powerbi.com/views/oauthredirect.html\">https://auth.franconnectuat.net/userauth/oauth/token?X-tenantID=developers.franconnectdemo.net&amp;grant_type=authorization_code&amp;client_id=FRANC0NN3CT_API&amp;<br>redirect_uri=https://oauth.powerbi.com/views/oauthredirect.html</a></li><li style=\"margin-left: 1px;\">Enter the client identifier used to identify the client during the application registration process in the <strong>Client ID</strong> field. <br>Example: Client ID can be FRANC0NN3CT_API</li><li style=\"margin-left: 1px;\">Enter the client secret issued to the client during the application registration process in the <strong>Client Secret</strong> field.<br>Example: Client secret can be DDEEMVOE2L0O1P9E<br>Contact <a href=\"mailto:integrations@franconnect.com\">integrations@franconnect.com</a> to get your client identifier and client secret</li><li style=\"margin-left: 1px;\">Select the option <strong>Send as Basic Auth header</strong> for the <strong>Client Authentication&nbsp;</strong>field.</li></ol></li></ol></p><img src=\"images/CompanyCode.png\"><p>After adding all these details, when you request for a token, you are prompted to enter the following additional information: <strong>Company Code</strong>, <strong>Username</strong> and <strong>Password</strong>.</p><ol>  <li>If the login URL for your Franconnect System is <a href=\"https://developers.franconnectdemo.net/fc,\">https://developers.franconnectdemo.net/fc</a>, then the company code will be developers.franconnectdemo.net/fc  </li><li>Your username and password will be your login credentials for your Franconnect system</li></ol><p>If all the details provided under the <strong>Authorization </strong>tab are valid, then, the access token is generated that can be used for the API calls.</p>"
    },
    {
      "name": "Error Codes",
      "description": "<p>Franconnect uses various error codes in the API response to indicate that the request was not processed. In general, response codes in the <code>2xx&nbsp;</code>range indicate success while codes in the <code>4xx&nbsp;</code>and <code>5xx&nbsp;</code>range indicate an error in processing the request (such as a required parameter was invalid, incorrect XML format, and so on).</p><p>Following are the common error codes and their meaning for the FranConnect API:</p><ul><li>    <p>400<strong> Invalid : &lt;parameter&gt;</strong> - Returned when the input parameter name is invalid</p></li><li><p>400<strong> Invalid XML format: {error}</strong> - Returned when the xmlString entered in the payload is invalid</p></li><li><p>400 <strong>Request to {operation}{subModule} is not supported</strong> - Returned when some operation is restricted for a specific sub-module</p></li> <li> <p>400 <strong>Invalid mandatory field : {field}</strong> - Returned when the value provided in xmlString is invalid for a mandatory field</p> </li><li><p>400 <strong>Invalid mandatory field : {custom_error}</strong> - Returned when the xmlString entered in the payload is invalid. For example, the end date is before the start date or the userID contains space(s)</p></li><li><p>401 <strong>Missing : &lt;parameter&gt; </strong> - Returned when a mandatory parameter is missing</p></li><li> <p>401 <strong>mandatory field : {field}</strong> - Returned when a mandatory field is missing in the xmlString.</p></li> <li><p>409 <strong>{subModule}already exists</strong> - Returned when you try to perform create operation for a sub-module again and only one time submission is allowed for that sub-module</p></li><li><p>411 <strong>Duplicate mandatory field : {field}</strong> - Returned when you try to input duplicate data</p></li><li><p>438 <strong>Invalid tag &lt;tagName&gt;</strong> - Returned when the &lt;tagName&gt; is invalid for the specified module and sub-module</p></li><li><p>500 <strong>Database error</strong> - Returned when there is a database mapping issue</p></li><li><p>503 <strong>Service Unavailable</strong> - Returned when the system is undergoing maintenance</p></li></ul><p></p><p></p>"
    },
    {
      "name": "List of Sub-Modules",
      "description": "<p>You must use the \"subModule\" endpoint to get a list of all sub-modules / tabs available for a specific module and use them, subsequently, in Create, Retrieve, Update, and, Delete operations.</p> To retrieve the list of subModules for a given module, you must make a POST request with “key”, “module name”, and “responseType” parameters appended in the URL. The following sections provide examples on how this is to be performed for Admin (module=admin), Sales (module=fs), Info Manager (module=fim), and CRM (module=cm).</p>",
      "operationId": "List_of_Sub_Modules"
    },
    {
      "name": "List of Field Names",
      "description": "<p> The \"query\" endpoint enables you to get all those field names and internal names that you need to send in the request body for Create, Retrieve, Update, and, Delete operations. You must use the \"query\" endpoint to generate an XML input sample. This XML sample must be used for manipulating various FranConnect System entities using the Create, Retrieve, Update, and Delete operations. Sample XML will adapt to contain the fields as per the form builder.</p><p>You must consider the following points before using the \"query\" endpoint:</p><ul><li>Once you have the access token, then only you are authorized to make a call to the \"query\" endpoint using this access token.</li><li>Request XMLs are generated after using this endpoint. You can use these Request XMLs to import/export/delete data into the FranConnect system. The 'module'represents the entity for which you want to retrieve the query xml string (for example, 'admin'for Admin, 'cm' for CRM, 'fs' for Sales, 'fim' for Info Manager. The subModule represents the sub-module/tab that is required (for example, 'user' for Users, 'contact' for contacts, 'lead' for leads, and, 'franchisee' for locations). </li><li>The 'roleTypeForQuery' parameter specifies the user type( for example, Corporate User, Franchisee User, and so on) that you want to create or update. However, for delete and retrieve operations, the 'roleTypeForQuery' parameter is not required. </li><li>The response is received in XML format only.</li><li>If internationalization (translation settings) is enabled, then the<strong> &lt;userLanguage&gt;</strong> element node appears in \"query\" endpoint for the create and update operations. Otherwise, your system's default language is considered as the default language for the API.</li></ul>",
      "operationId": "List_of_Field_Names"
    },
    {
      "name": "Admin",
      "description": "<p>The Admin module enables you to manage different types of users and locations. Using the FranConnect API, you can perform Create, Retrieve, Update, and Delete operations for various types of users (such as Corporate User, Regional User, Franchisee User, and Divisional User) and locations.</p><p>The following sections explain and provide examples to perform Create, Retrieve, Update, and Delete operations for users. Similarly, you can perform Create, Retrieve, and Update operations for locations.</p>"
    },
    {
      "name": "Sales",
      "description": "<p>The Sales Module helps you to manage franchisee leads across their lifecycle. Using the FranConnect API, you can perform Create, Retrieve, Update, and Delete operations for all the tabs that are available in <strong>Sales > Lead Management</strong>, except the file type fields and the pages/tabs that contain multiple tabular sections. The “file” type of fields are not supported by the FranConnect API and you can perform only Retrieve operations on pages that contain multiple tabular sections. </p><p>The following sections provide details and examples to perform Create, Retrieve, Update, and Delete operations on a Sales Lead’s “Primary Info” tab. Similarly, you can perform these operations for any other tab in <strong>Sales > Lead Management</strong>.</p>"
    },
    {
      "name": "Info Manager",
      "description": "<p>The Info Manager module comprises of both, in-development as well as operational locations, that you can manage through the FranConnect API. Using Create, Retrieve, Update, and Delete API operations, you can manage information that can either be in the location’s main page (in Center Info) or in any of the tabs (such as Real Estate and Mystery Review).</p><p>Note that the following sections explain and provide examples on how to perform these operations on the “Primary Info” tab for locations. Similarly, you can perform these  operations for other tabs as well for locations that are either in-development or have been opened since.</p>"
    },
    {
      "name": "CRM",
      "description": "<p>The CRM module is used to manage leads, contacts, and accounts across their entire lifecycle. Using Create, Retrieve, Update, and Delete API operations, you can manage information that can either be in the CRM’s main page or in any of the tabs (such as Accounts, Leads, Contacts, and Opportunities).</p>"
    },
    {
      "name": "Tasks",
      "description": "<p> A task is a piece of work to be done. Using the FranConnect API, you can perform Create, Retrieve, Update, and, Delete operations for the tasks in Sales, Info Manager and CRM modules.</p>"
    },
    {
      "name": "Emails",
      "description": "Using the FranConnect API, you can perform the Create, Retrieve and Delete operations for emails as follows:  emails and outlook emails for CRM-Contacts; lead emails and lead outlook emails for CRM-Leads; external emails, outlook emails for Info Manager-Locations; and Sales emails, outlook emails for Sales-Leads."
    },
    {
      "name": "SMS",
      "description": "<p>Using the FranConnect API, you can perform the Retrieve operation for SMS as follows: CRM-Contacts and CRM-Leads, Sales-Leads</p>\n>"
    },
    {
      "name": "Campaigns",
      "description": "<p>Using the FranConnect API, you can perform the Retrieve operation for Campaigns as follows: CRM-Contacts and CRM-Leads, Sales-Leads.</p>"
    },
    {
      "name": "Email Campaigns",
      "description": "<p>Using the FranConnect API, you can perform the Retrieve operation for Campaign emails as follows: CRM-Contacts and CRM-Leads, Sales-Leads.</p>"
    },
    {
      "name": "SMS Campaigns",
      "description": "<p>Using the FranConnect API, you can perform the Retrieve operation for Campaign SMS as follows: CRM-Contacts and CRM-Leads, Sales-Leads.</p>"
    },
    {
      "name": "Finance",
      "description": "<p>The Finance module supports integration with other third party systems for reporting on sales, royalties, profit and loss, and payments. The FranConnect API allows you to automate the transfer of data between the Finance module and your Finance/POS systems.</p>"
    },
    {
      "name": "Franchisee Number",
      "description": "<p class=\"western\">Franchisee number is the unique reference number that is used in the API to reference a particular location. The franchisee number is used while performing CRUD operations, primarily in the Finance module. You can retrieve a list of the franchisee numbers for all the locations or for a single location.</p>"
    },
    {
      "name": "Sales Reports",
      "description": "This API endpoint supports the Finance Sales based operations."
    },
    {
      "name": "Royalties",
      "description": "This API endpoint supports the Finance Royalty based operations."
    },
    {
      "name": "Payments",
      "description": "This API endpoint supports the Finance Payment based operations."
    },
    {
      "name": "Profit and Loss Statements",
      "description": "This API endpoint supports the Finance Profit and Loss based operations."
    }
  ],
  "x-tagGroups": [
    {
      "name": "",
      "tags": [
        "Introduction",
        "Authentication",
        "Franchisee Number",
        "Retrieve Franchisee Number",
        "Error Codes",
        "List of Sub-Modules",
        "Retrieve Sub-Modules",
        "List of Field Names",
        "Retrieve Schema",
        "Admin",
        "User",
        "Sales",
        "Lead",
        "Info Manager",
        "Franchisee",
        "CRM",
        "CRM Lead",
        "Contact",
        "Account",
        "Transactions",
        "Opportunity",
        "Tasks",
        "Task",
        "Emails",
        "Email",
        "SMS",
        "Retrieve SMS",
        "Campaigns",
        "Email Campaigns",
        "SMS Campaigns",
        "Finance",
        "Sales Reports",
        "Royalties",
        "Payments",
        "Profit and Loss Statements"
      ]
    }
  ],
  "paths": {
    "/common/franchisee": {
      "get": {
        "tags": [
          "Retrieve Franchisee Number"
        ],
        "summary": "Retrieve for all Locations",
        "description": "<p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>GET</p><p class=\"western\"><strong>API Endpoint &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/common/franchisee</p><h4>To retrieve the Franchisee Number, you must provide the following items in the header of the GET request: </h4><ol><li><p>\"Authorization\" as the key and its value in the format \"Bearer access_token\". This access_token is generated as a part of authentication. Click <u><a href=\"#tag/Authentication\">here</a></u> for details on the steps to generate the access token.<br>Note that you are required to select the option <strong>Inherit auth from parent</strong> for the <strong>Type</strong> field under the <strong>Authorization</strong> tab before generating the access token.</p></li><li><p>Specify &ldquo;Content-Type&rdquo; as the key and its value in the format &ldquo;application/json&rdquo;.</p></li><li><p>Specify &ldquo;X-TenantId&rdquo; as the key and its value based on your FranConnect system&rsquo;s URL. Click <u><a href=\"#tag/Authentication\">here</a></u>&nbsp;for details on identifying the &ldquo;X-TenantId&rdquo;.</p></li></ol><p class=\"western\">Performing the above mentioned steps will provide the franchisee number and the franchisee names of all the locations.</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": []
      }
    },
    "/common/franchisee/filter": {
      "post": {
        "tags": [
          "Retrieve Franchisee Number"
        ],
        "summary": "Retrieve for a specific Location",
        "description": "</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>POST</p><p class=\"western\"><strong>API Endpoint &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/common/franchisee/filter</p><h4>To retrieve the Franchisee Number for a specific location, you must provide the following items in the header of the POST request: </h4><ol><li><p>\"Authorization\" as the key and its value in the format \"Bearer access_token\". This access_token is generated as a part of authentication. Click <u><a href=\"#tag/Authentication\">here</a></u> for details on the steps to generate the access token.<br>Note that you are required to select the option <strong>Inherit auth from parent</strong> for the <strong>Type</strong> field under the <strong>Authorization</strong> tab before generating the access token.</p></li><li><p>Specify &ldquo;Content-Type&rdquo; as the key and its value in the format &ldquo;application/json&rdquo;.</p></li><li><p>Specify &ldquo;X-TenantId&rdquo; as the key and its value based on your FranConnect system&rsquo;s URL. Click <u><a href=\"#tag/Authentication\">here</a></u>&nbsp;for details on identifying the &ldquo;X-TenantId&rdquo;.</p></li></ol><p class=\"western\">You can specify any of the following as the filter criteria in the body of the request: areas, countries, divisions, entities, fields, and franchisee numbers. Performing the above mentioned steps will provide the franchisee number and the franchisee name for the required location.</p>",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/components/requestBodies/AdminSubModuleArray"
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/submodule?module=admin": {
      "post": {
        "tags": [
          "Retrieve Sub-Modules"
        ],
        "summary": "Admin",
        "description": "<p class=\"western\">Use this operation to get a list of all sub-modules / tabs available for Admin.<p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/submodule?key=generatedAccessToken&module=admin&responseType=XML</p>",
        "responses": {
          "200": {
            "$ref": "#/components/responses/AdminSubModuleResp"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/AdminSubModuleArray"
        }
      }
    },
    "/dataservices/submodule?module=fs": {
      "post": {
        "tags": [
          "Retrieve Sub-Modules"
        ],
        "summary": "Sales",
        "description": "<p class=\"western\">Use this operation to get list of all sub-modules / tabs available for Sales.</p></p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/submodule?key=generatedAccessToken&module=fs&responseType=XML</p><p><strong>Notes:</strong> In response, the \"element names\" specify the actual name that you must use to perform any operation and \"element value\" specifies the display name of the sub-module that is displayed in the system.<br />Format: &lt; element_name&gt; element_value&lt; /element_name&gt;<br />Example: &lt;user&gt;User&lt;/user&gt;<br />Here, <strong>user</strong> is the subModule key that is to be used in the API for user.</p>",
        "responses": {
          "200": {
            "$ref": "#/components/responses/SalesSubModuleResp"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/SalesSubModuleArray"
        }
      }
    },
    "/dataservices/submodule?module=fim": {
      "post": {
        "tags": [
          "Retrieve Sub-Modules"
        ],
        "summary": "Info Manager",
        "description": "<p class=\"western\">Use this operation to get list of all sub-modules / tabs available for Info Manager.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/submodule?key=generatedAccessToken&module=fim&responseType=XML</p>",
         "responses": {
          "200": {
            "$ref": "#/components/responses/InfoMgrSubModuleResp"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/InfoMgrSubModuleArray"
        }
      }
    },
    "/dataservices/submodule?module=cm": {
      "post": {
        "tags": [
          "Retrieve Sub-Modules"
        ],
        "summary": "CRM",
        "description": "<p class=\"western\">Use this operation to get list of all sub-modules / tabs available for CRM.</p></p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/submodule?key=generatedAccessToken&module=cm&responseType=XML</p>",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CRMSubModuleResp"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/CRMSubModuleArray"
        }
      }
    },
    "/dataservices/query?module=admin&operation=create": {
      "post": {
        "tags": [
          "Retrieve Schema"
        ],
        "summary": "Create",
        "description": "<p class=\"western\">This section contains an example of the “query” endpoint applied to retrieve fields that are available during the Create operation for the Admin sub-module. </p><p>In a similar manner, the “query” endpoint can be applied to retrieve fields that are available during the Create operation for the Sales, Info Manager and CRM sub-modules.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/query?key=generatedAccessToken&module=admin&operation=create&roleTypeForQuery=1&subModule=user</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateSchemaArray"
        }
      }
    },
    "/dataservices/query?module=admin&operation=retrieve": {
      "post": {
        "tags": [
          "Retrieve Schema"
        ],
        "summary": "Retrieve",
        "description": "<p class=\"western\">This section contains an example of the “query” endpoint applied to retrieve fields that are available during the Retrieve operation for the Admin sub-module. </p><p>In a similar manner, the “query” endpoint can be applied to retrieve fields that are available during the Retrieve operation for the Sales, Info Manager and CRM sub-modules.<p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/query?key=generatedAccessToken&module=admin&operation=retrieve&roleTypeForQuery=1&subModule=user</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/RetrieveSchemaArray"
        }
      }
    },
    "/dataservices//dataservices/query?module=admin&operation=update": {
      "post": {
        "tags": [
          "Retrieve Schema"
        ],
        "summary": "Update",
        "description": "<p class=\"western\">This section contains an example of the “query” endpoint applied to retrieve fields that are available during the Update operation for the Admin sub-module. </p><p>In a similar manner, the “query” endpoint can be applied to retrieve fields that are available during the Update operation for the Sales, Info Manager and CRM sub-modules.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/query?key=generatedAccessToken&module=admin&operation=update&roleTypeForQuery=1&subModule=user</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateSchemaArray"
        }
      }
    },
    "/dataservices/query?module=admin&operation=delete": {
      "post": {
        "tags": [
          "Retrieve Schema"
        ],
        "summary": "Delete",
        "description": "<p class=\"western\">This section contains an example of the “query” endpoint applied to retrieve fields that are available during the Delete operation for the Admin sub-module. </p><p>In a similar manner, the “query” endpoint can be applied to retrieve fields that are available during the Delete operation for the Sales, Info Manager and CRM sub-modules.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/query?key=generatedAccessToken&module=admin&operation=delete&roleTypeForQuery=1&subModule=user</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/DeleteSchemaArray"
        }
      }
    },
    "/dataservices/create User": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create",
        "description": "<p class=\"western\">This section provides details (as well as an example)for performing the Create operation to add a user in the FranConnect system. Note that it is important to specify the “userLevel”, as this would determine the type of user that would be created. For example, to create a corporate user, the “userLevel” must be “Corporate”. Similarly, for regional users, the “userLevel” must be “Regional” and for brand/divisional users, the “userLevel” must be “Divisional”. For franchisee users, the “userLevel” can either be an “Owner” or an “Employee”, depending on the type of franchisee user that is created.</p> <p> Similarly, the Create operation can also be performed to add locations in the FranConnect system. </p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/create?key=generatedAccessToken&module=admin&subModule=user&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Create operation</h4><p class=\"western\">To perform a Create operation for adding a user using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Create operation is being performed. In this case, the module to be used is “admin”</u>.</p></li><li><p>The sub-module for which the Create operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “user”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to add a user. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Create. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve User": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Retrieve",
        "description": "<p class=\"western\">This section contains an example of the Retrieve operation performed for retrieving the details of a user. In a similar manner, the Retrieve operation can be performed to retrieve information for a franchisee location. </p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/retrieve?key=generatedAccessToken&module=admin&subModule=user&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Retrieve operation</h4><p class=\"western\">To perform a Retrieve operation for retrieving the details of a user using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Retrieve operation is being performed. In this case, the module to be used is “admin”</u>.</p></li><li><p>The sub-module for which the Retrieve operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “user”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to retrieve a user. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Retrieve. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/update User": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update",
        "description": "<p class=\"western\">This section contains an example of the Update operation performed for updating the details of a user. In a similar manner, the Update operation can be performed to update information for a franchisee location. </p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/update?key=generatedAccessToken&module=admin&subModule=user&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform an Update operation</h4><p class=\"western\">To perform an Update operation for updating the details of a user using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Update operation is being performed. In this case, the module to be used is “admin”</u>.</p></li><li><p>The sub-module for which the Update operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “user”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to update a user. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Update. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/Delete User": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Delete",
        "description": "<p class=\"western\">This section contains an example of the Delete operation performed for deleting the details of a user. Note that the FranConnect API does not support the deletion of a Franchisee location. </p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/delete?key=generatedAccessToken&module=admin&subModule=user&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Delete operation</h4><p class=\"western\">To perform a Delete operation for deleting the details of a user using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Delete operation is being performed. In this case, the module to be used is “admin”</u>.</p></li><li><p>The sub-module for which the Delete operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “user”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to delete a location. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Delete. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/create lead": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Create",
        "description": "<p class=\"western\">This section contains an example of the Create operation performed for adding a Sales lead. In a similar manner, the Create operation can be performed to add other details for the lead. </p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/create?key=generatedAccessToken&module=fs&subModule=lead&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Create operation</h4><p class=\"western\">To perform a Create operation for adding a lead using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Create operation is being performed. In this case, the module to be used is “fs”</u>.</p></li><li><p>The sub-module for which the Create operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “lead”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to add a lead. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Create. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p><p>Notes:</p><ul><li>Here, &lt;division&gt; will be considered only if Division/Brand is enabled in FranConnect system.</li><li>Reference ID of the lead owner (Chris Barlow) can also be provided instead of providing name in &lt;leadOwnerID&gt;. This will ensure owner with provided referenceId will be assigned as lead owner, as owners with same name can exist, but all owners have different referenceIds. A lead Owner's Reference ID can be retrieved by performing a retrieve operation with 'admin&rsquo; as the module and 'user&rsquo; as the subModule. Click <u><a href=\"#tag/List-of-Field-Names\">here</a></u> for further details on how this information can be retrieved.</li><li>In case the email ID of the lead matches that of any existing lead in the system, the email subscription of the lead that is being created would be the same as the email subscription of the existing lead.</li></ul></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve lead": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Retrieve",
        "description": "<p class=\"western\">This section contains an example of the Retrieve operation performed for retrieving the details of a lead. In a similar manner, the Retrieve operation can be performed to retrieve other details for the lead. </p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/retrieve?key=generatedAccessToken&module=fs&subModule=lead&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Retrieve operation</h4><p class=\"western\">To perform a Retrieve operation for retrieving the details of a lead using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Retrieve operation is being performed. In this case, the module to be used is “fs”</u>.</p></li><li><p>The sub-module for which the Retrieve operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “lead”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to retrieve a lead. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Retrieve. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSRetrieveLeadArray"
        }
      }
    },
    "/dataservices/update lead": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Update",
        "description": "<p class=\"western\">This section contains an example of the Update operation performed for updating a Sales lead. In a similar manner, the Update operation can be performed to modify other details for the lead. </p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/update?key=generatedAccessToken&module=fs&subModule=lead&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform an Update operation</h4><p class=\"western\">To perform an Update operation for updating a lead using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Update operation is being performed. In this case, the module to be used is “fs”</u>.</p></li><li><p>The sub-module for which the Update operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “lead”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to update a lead. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Update. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSUpdateLeadArray"
        }
      }
    },
    "/dataservices/Delete lead": {
      "post": {
        "tags": [
          "Lead"
        ],
        "summary": "Delete",
        "description": "<p class=\"western\">This section contains an example of the Delete operation performed for deleting a Sales lead. In a similar manner, the Delete operation can be performed to delete other details for the lead. </p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/delete?key=generatedAccessToken&module=fs&subModule=lead&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Delete operation</h4><p class=\"western\">To perform a Delete operation for deleting a lead using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Delete operation is being performed. In this case, the module to be used is “fs”</u>.</p></li><li><p>The sub-module for which the Delete operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “lead”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to delete a lead. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Delete. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/create Franchisee": {
      "post": {
        "tags": [
          "Franchisee"
        ],
        "summary": "Create",
        "description": "<p class=\"western\">This section contains an example of the Create operation performed for adding a franchisee location through the Info Manager module. In a similar manner, the Create operation can be performed to add the different Info Manager entities.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/create?key=generatedAccessToken&module=fim&subModule=franchisee&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Create operation</h4><p class=\"western\">To perform a Create operation for adding a franchisee location using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Create operation is being performed. In this case, the module to be used is “fim”</u>.</p></li><li><p>The sub-module for which the Create operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “franchisee”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to add a franchisee location. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Create. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve Franchisee": {
      "post": {
        "tags": [
          "Franchisee"
        ],
        "summary": "Retrieve",
        "description": "<p class=\"western\">This section contains an example of the Retrieve operation performed for retrieving a franchisee location through the Info Manager module. In a similar manner, the Retrieve operation can be performed to Retrieve the different Info Manager entities.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/retrieve?key=generatedAccessToken&module=fim&subModule=franchisee&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Retrieve operation</h4><p class=\"western\">To perform a Retrieve operation for retrieving a franchisee location using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Retrieve operation is being performed. In this case, the module to be used is “fim”</u>.</p></li><li><p>The sub-module for which the Retrieve operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “franchisee”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to retrieve a franchisee location. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Retrieve. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/update Franchisee": {
      "post": {
        "tags": [
          "Franchisee"
        ],
        "summary": "Update",
        "description": "<p class=\"western\">This section contains an example of the Update operation performed for updating a franchisee location through the Info Manager module. In a similar manner, the Update operation can be performed to update the different Info Manager entities.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/update?key=generatedAccessToken&module=fim&subModule=franchisee&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform an Update operation</h4><p class=\"western\">To perform an Update operation for updating a franchisee location using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Update operation is being performed. In this case, the module to be used is “fim”</u>.</p></li><li><p>The sub-module for which the Update operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “franchisee”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to update a franchisee location. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Update. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/Delete Franchisee": {
      "post": {
        "tags": [
          "Franchisee"
        ],
        "summary": "Delete",
        "description": "<p class=\"western\">This section contains an example of the Delete operation to delete a franchisee location through the Info Manager module. Note that the FranConnect API does not support the deletion of a franchisee location. However, the Delete operation can be performed to delete the other Info Manager entities.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;&nbsp;&nbsp;: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/delete?key=generatedAccessToken&module=fim&subModule=franchisee&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Delete operation</h4><p class=\"western\">To perform a Delete operation for deleting a sub module under the Info Manager module using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Delete operation is being performed. In this case, the module to be used is “fim”</u>.</p></li><li><p>The sub-module for which the Delete operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “franchisee”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to delete a sub module. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Delete. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/create CRM Lead": {
      "post": {
        "tags": [
          "CRM Lead"
        ],
        "summary": "Create",
        "description": "<p class=\"western\">This section contains an example of the Create operation to add a CRM lead through the CRM > Leads module. Similarly, you can use the Create operation to add data to any of the tabs/ sub-modules in CRM > Leads.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/create?key=generatedAccessToken&module=cm&subModule=lead&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Create operation</h4><p class=\"western\">To perform a Create operation for adding a CRM lead using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Create operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Create operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “lead”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to add a CRM lead. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Create. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p><p><strong>Note:</strong> In order to create data in any tab/ sub-module other than “lead”, it is mandatory to specify the lead for which this data is to be created. The best way to uniquely specify a lead is through its “referenceId”, which can be retrieved from <u><a href=\"#tag/Authentication\">here</a></u>. You can also perform a Query operation to retrieve the schema that would be used to create data for that module-subModule combination. Click <u><a href=\"#tag/Authentication\">here</a></u> for more details.</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateCRMLeadArray"
        }
      }
    },
    "/dataservices/retrieve CRM Lead": {
      "post": {
        "tags": [
          "CRM Lead"
        ],
        "summary": "Retrieve",
        "description": "<p class=\"western\">This section contains an example of the Retrieve operation to retrieve a CRM lead through the CRM > Leads module. Similarly, you can use the Retrieve operation to retrieve data from any of the tabs/ sub-modules in CRM > Leads.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/retrieve?key=generatedAccessToken&module=cm&subModule=lead&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Retrieve operation</h4><p class=\"western\">To perform a Retrieve operation for retrieving a CRM lead using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Retrieve operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Retrieve operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “lead”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to retrieve a CRM lead. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Retrieve. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateCRMLeadArray"
        }
      }
    },
    "/dataservices/update CRM Lead": {
      "post": {
        "tags": [
          "CRM Lead"
        ],
        "summary": "Update",
        "description": "<p class=\"western\">This section contains an example of the Update operation to update a CRM lead through the CRM > Leads module. Similarly, you can use the Update operation to updata data from any of the tabs/ sub-modules in CRM > Leads.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/update?key=generatedAccessToken&module=cm&subModule=lead&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform an Update operation</h4><p class=\"western\">To perform an Update operation for updating a CRM lead using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Update operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Update operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “lead”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to update a CRM lead. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Update. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p><p><strong>Note:</strong> In order to update data in any tab/ sub-module other than “lead”, it is mandatory to specify the lead for which this data is to be updated. The best way to uniquely specify a lead is through its “referenceId”, which can be retrieved from <u><a href=\"#tag/Authentication\">here</a></u>. You can also perform a Query operation to retrieve the schema that would be used to update data for that module-subModule combination. Click <u><a href=\"#tag/Authentication\">here</a></u> for more details.</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateCRMLeadArray"
        }
      }
    },
    "/dataservices/Delete CRM Lead": {
      "post": {
        "tags": [
          "CRM Lead"
        ],
        "summary": "Delete",
        "description": "<p class=\"western\">This section contains an example of the Delete operation to delete a CRM lead through the CRM > Leads module. Similarly, you can use the Delete operation to delete data from any of the tabs/ sub-modules in CRM > Leads.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/delete?key=generatedAccessToken&module=cm&subModule=lead&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Delete operation</h4><p class=\"western\">To perform a Delete operation for deleting a CRM lead using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Delete operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Delete operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “lead”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to delete a CRM lead. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Delete. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p><p><strong>Note:</strong> In order to delete data from any tab/ sub-module other than “lead”, it is mandatory to specify the lead for which this data is to be deleted. The best way to uniquely specify a lead is through its “referenceId”, which can be retrieved from <u><a href=\"#tag/Authentication\">here</a></u>. You can also perform a Query operation to retrieve the schema that would be used to delete data for that module-subModule combination. Click <u><a href=\"#tag/Authentication\">here</a></u> for more details.</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateCRMLeadArray"
        }
      }
    },
    "/dataservices/create Contact": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Create",
        "description": "<p class=\"western\">This section contains an example of the Create operation to add a CRM contact through the CRM > Contacts module. Similarly, you can use the Create operation to add data to any of the tabs/ sub-modules in CRM > Contacts.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/create?key=generatedAccessToken&module=cm&subModule=contact&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Create operation</h4><p class=\"western\">To perform a Create operation for adding a CRM contact using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Create operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Create operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “contact”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to add a CRM contact. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Create. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateCRMLeadArray"
        }
      }
    },
    "/dataservices/retrieve Contact": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Retrieve",
        "description": "<p class=\"western\">This section contains an example of the Retrieve operation to retrieve a CRM contact through the CRM > Contacts module. Similarly, you can use the Retrieve operation to retrieve data from any of the tabs/ sub-modules in CRM > Contacts.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/retrieve?key=generatedAccessToken&module=cm&subModule=contact&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Retrieve operation</h4><p class=\"western\">To perform a Retrieve operation for retrieving a CRM contact using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Retrieve operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Retrieve operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “contact”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to retrieve a CRM contact. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Retrieve. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateCRMLeadArray"
        }
      }
    },
    "/dataservices/update Contact": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Update",
        "description": "<p class=\"western\">This section contains an example of the Update operation to update a CRM contact through the CRM > Contacts module. Similarly, you can use the Update operation to update data from any of the tabs/ sub-modules in CRM > Contacts.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/update?key=generatedAccessToken&module=cm&subModule=contact&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform an Update operation</h4><p class=\"western\">To perform an Update operation for updating a CRM contact using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Update operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Update operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “contact”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to update a CRM contact. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Update. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/Delete Contact": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Delete",
        "description": "<p class=\"western\">This section contains an example of the Delete operation to delete a CRM contact through the CRM > Contacts module. Similarly, you can use the Delete operation to delete data from any of the tabs/ sub-modules in CRM > Contacts.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/delete?key=generatedAccessToken&module=cm&subModule=contact&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Delete operation</h4><p class=\"western\">To perform a Delete operation for deleting a CRM contact using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Delete operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Delete operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “contact”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to delete a CRM contact. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Delete. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/create Account": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Create",
        "description": "<p class=\"western\">This section contains an example of the Create operation to add a CRM account through the CRM > Accounts module. Similarly, you can use the Create operation to add data to any of the tabs/ sub-modules in CRM > Accounts.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/create?key=generatedAccessToken&module=cm&subModule=account&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Create operation</h4><p class=\"western\">To perform a Create operation for adding a CRM account using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Create operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Create operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “account”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to add a CRM account. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Create. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve Account": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Retrieve",
        "description": "<p class=\"western\">This section contains an example of the Retrieve operation to retrieve a CRM account through the CRM > Accounts module. Similarly, you can use the Retrieve operation to retrieve data from any of the tabs/ sub-modules in CRM > Accounts.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/retrieve?key=generatedAccessToken&module=cm&subModule=account&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Retrieve operation</h4><p class=\"western\">To perform a Retrieve operation for adding a CRM account using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Retrieve operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Retrieve operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “account”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to retrieve a CRM account. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Retrieve. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/update Account": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Update",
        "description": "<p class=\"western\">This section contains an example of the Update operation to update a CRM account through the CRM > Accounts module. Similarly, you can use the Update operation to update data from any of the tabs/ sub-modules in CRM > Accounts.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/update?key=generatedAccessToken&module=cm&subModule=account&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform an Update operation</h4><p class=\"western\">To perform an Update operation for adding a CRM account using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Update operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Update operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “account”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to update a CRM account. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Update. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/Delete Account": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Delete",
        "description": "<p class=\"western\">This section contains an example of the Delete operation to delete a CRM account through the CRM > Accounts module. Similarly, you can use the Delete operation to delete data from any of the tabs/ sub-modules in CRM > Accounts.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/delete?key=generatedAccessToken&module=cm&subModule=account&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Delete operation</h4><p class=\"western\">To perform a Delete operation for deleting a CRM account using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Delete operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Delete operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “account”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to delete a CRM account. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Delete. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateCRMLeadArray"
        }
      }
    },
    "/dataservices/create Transactions": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Create",
        "description": "<p class=\"western\">This section contains an example of the Create operation to add a CRM transaction through the CRM > Transactions module. Similarly, you can use the Create operation to add data to any of the tabs/ sub-modules in CRM > Transactions.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/create?key=generatedAccessToken&module=cm&subModule=transaction&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Create operation</h4><p class=\"western\">To perform a Create operation for adding a transaction using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Create operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Create operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “transaction”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to add a CRM transaction. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Create. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve Transactions": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieve",
        "description": "<p class=\"western\">This section contains an example of the Create operation to add a CRM transaction through the CRM > Transactions module.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/retrieve?key=generatedAccessToken&module=cm&subModule=transaction&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Retrieve operation</h4><p class=\"western\">To perform a Retrieve operation for retrieving a transaction using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Retrieve operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Create operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “transaction”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to retrieve a CRM transaction. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Retrieve. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/update Transactions": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Update",
        "description": "<p class=\"western\">This section contains an example of the Update operation performed for updating a CRM transaction through the CRM module.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/update?key=generatedAccessToken&module=cm&subModule=transaction&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform an Update operation</h4><p class=\"western\">To perform an Update operation for updating a transaction using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Update operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Update operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “transaction”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to update a CRM transaction. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Update. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/Delete Transactions": {
      "post": {
        "tags": [
          "Transactions"
        ],
        "summary": "Delete",
        "description": "<p class=\"western\">This section contains an example of the Delete operation performed for deleting a CRM transaction through the CRM module.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/delete?key=generatedAccessToken&module=cm&subModule=transaction&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Delete operation</h4><p class=\"western\">To perform a Delete operation for deleting a transaction using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Delete operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Delete operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “transaction”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to delete a CRM transaction. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Delete. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/create Opportunity": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Create",
        "description": "<p class=\"western\">This section contains an example of the Create operation performed for adding a CRM Opportunity through the CRM module. Similarly, you can perform the Create operation to add data in the Transactions sub-module in CRM > Opportunities and the following CRM Opportunity entities: Opportunity Call, Opportunity Remark, and Opportunity Task.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/create?key=generatedAccessToken&module=cm&subModule=opportunity&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Create operation</h4><p class=\"western\">To perform a Create operation for adding an opportunity using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Create operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Create operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “opportunity”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to add a CRM opportunity. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Create. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve Opportunity": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Retrieve",
        "description": "<p class=\"western\">This section contains an example of the Retrieve operation performed for retrieving a CRM Opportunity through the CRM module. Similarly, you can perform the Retrieve operation to retrieve data from the Transactions sub-module in CRM > Opportunities and the following CRM Opportunity entities: Opportunity Call, Opportunity Remark, and Opportunity Task. </p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/retrieve?key=generatedAccessToken&module=cm&subModule=opportunity&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Retrieve operation</h4><p class=\"western\">To perform a Retrieve operation for retrieving an opportunity using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Retrieve operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Retrieve operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “opportunity”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to retrieve a CRM opportunity. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Retrieve. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/update Opportunity": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Update",
        "description": "<p class=\"western\">This section contains an example of the Update operation performed for updating a CRM Opportunity through the CRM module. Similarly, you can perform the Update operation to update data in the Transactions sub-module in CRM > Opportunities and the following CRM Opportunity entities: Opportunity Call, Opportunity Remark, and Opportunity Task.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/update?key=generatedAccessToken&module=cm&subModule=opportunity&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform an Update operation</h4><p class=\"western\">To perform an Update operation for updating an opportunity using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Update operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Update operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “opportunity”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to update a CRM opportunity. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Update. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/Delete Opportunity": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Delete",
        "description": "<p class=\"western\">This section contains an example of the Delete operation performed for deleting a CRM Opportunity through the CRM module. Similarly, you can perform the Delete operation to delete data from the Transactions sub-module in CRM > Opportunities and the following CRM Opportunity entities: Opportunity Call, Opportunity Remark, and Opportunity Task.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/delete?key=generatedAccessToken&module=cm&subModule=opportunity&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Delete operation</h4><p class=\"western\">To perform a Delete operation for deleting an opportunity using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Delete operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Delete operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “opportunity”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to delete a CRM opportunity. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Delete. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/create Task": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create",
        "description": "<p class=\"western\">This section contains an example of the Create operation performed for adding a Task for a contact through the Sales module. In a similar manner, the Create operation can be performed to add tasks through the CRM and the Info Manager modules.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/create?key=generatedAccessToken&module=fs&subModule=task&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Create operation</h4><p class=\"western\">To perform a Create operation for adding a task using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Create operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Create operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “cmTask”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to add a CRM task. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Create. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>Note:</strong> To add a task in any tab/ sub-module, it is mandatory to specify the lead for which this data is to be created. The best way to uniquely specify a lead is through its “referenceId”, which can be retrieved from <u><a href=\"#tag/Authentication\">here</a></u>z`",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve Task": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Retrieve",
        "description": "<p class=\"western\">This section contains an example of the Retrieve operation performed for retrieving a Task for a contact through the Sales module. In a similar manner, the Retrieve operation can be performed to retrieve tasks through the CRM and the Info Manager modules. </p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/create?key=generatedAccessToken&module=fs&subModule=task&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Retrieve operation</h4><p class=\"western\">To perform a Retrieve operation for retrieving a task using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Retrieve operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Retrieve operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “cmTask”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to retrieve a CRM task. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Create. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/update Task": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Update",
        "description": "<p class=\"western\">This section contains an example of the Update operation performed for updating a Task for a contact through the Sales module. In a similar manner, the Update operation can be performed to update tasks through the CRM and the Info Manager modules.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/update?key=generatedAccessToken&module=fs&subModule=task&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform an Update operation</h4><p class=\"western\">To perform an Update operation for updating a task using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Update operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Update operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “cmTask”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to update a CRM task. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Update. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/delete Task": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Delete",
        "description": "<p class=\"western\">This section contains an example of the Delete operation performed for deleting a task for a contact through the Sales module. In a similar manner, the Create operation can be performed to delete tasks through the CRM and the Info Manager modules. </p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/delete?key=generatedAccessToken&module=fs&subModule=task&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Delete operation</h4><p class=\"western\">To perform a Delete operation for deleting a task using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Delete operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Delete operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “cmTask”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to delete a CRM task. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Delete. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/create Email": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Create",
        "description": "<p class=\"western\">This section contains an example of the Create operation performed for adding an email for a contact through the CRM module. In a similar manner, the Create operation can be performed to add emails through the Sales and the Info Manager modules.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/create?key=generatedAccessToken&module=cm&subModule=mail&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Create operation</h4><p class=\"western\">To perform a Create operation for adding an email using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Create operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Create operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “mail”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to add a CRM task. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Create. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve Email": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Retrieve",
        "description": "<p class=\"western\"><p class=\"western\">This section contains an example of the Retrieve operation performed for retrieving an email for a contact through the CRM module. In a similar manner, the Retrieve operation can be performed to retrieve emails through the Sales and the Info Manager modules.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/retrieve?key=generatedAccessToken&module=cm&subModule=mail&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Retrieve operation</h4><p class=\"western\">To perform a Retrieve operation for retrieving an email using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Retrieve operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Retrieve operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “mail”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to retrieve a CRM email. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Retrieve. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/delete Email": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Delete",
        "description": "<p class=\"western\"><p class=\"western\">This section contains an example of the Delete operation performed for deleting an email for a contact through the CRM module. In a similar manner, the Delete operation can be performed to delete emails through the Sales and the Info Manager modules.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/delete?key=generatedAccessToken&module=cm&subModule=mail&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Delete operation</h4><p class=\"western\">To perform a Delete operation for deleting an email using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Delete operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Delete operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “mail”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to delete an email. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Delete. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve Email Campaigns": {
      "post": {
        "tags": [
          "Email Campaigns"
        ],
        "summary": "Retrieve",
        "description": "<p class=\"western\">This section contains an example of the Retrieve operation performed for retrieving a Campaign email for a contact through the CRM module. In a similar manner, the Retrieve operation can be performed to retrieve Campaign emails through the Sales module.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/retrieve?key=generatedAccessToken&module=cm&subModule=CampaignEmail&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Retrieve operation</h4><p class=\"western\">To perform a Retrieve operation for retrieving a Campaign email using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Retrieve operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Retrieve operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “CampaignEmail”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to retrieve a Campaign email. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Retrieve. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve SMS": {
      "post": {
        "tags": [
          "Retrieve SMS"
        ],
        "summary": "Retrieve",
        "description": "<p class=\"western\"><p class=\"western\">This section contains an example of the Retrieve operation performed for retrieving an SMS for a contact through the CRM module. In a similar manner, the Retrieve operation can be performed to retrieve SMS through the Sales module.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/retrieve?key=generatedAccessToken&module=cm&subModule=ContactSMS&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Retrieve operation</h4><p class=\"western\">To perform a Retrieve operation for retrieving an SMS using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Retrieve operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Retrieve operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “ContactSMS”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to retrieve SMS. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Retrieve. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve SMS Campaigns": {
      "post": {
        "tags": [
          "SMS Campaigns"
        ],
        "summary": "Retrieve",
        "description": "<p class=\"western\">This section contains an example of the Retrieve operation performed for retrieving a Campaign SMS for a contact through the CRM module. In a similar manner, the Retrieve operation can be performed to retrieve Campaign SMS through the Sales module.</p><p class=\"western\"><strong>Operation Name: </strong> POST</p><p class=\"western\"><strong> API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong><context-path>/rest/dataservices/retrieve?key=generatedAccessToken&module=cm&subModule=SMSCampaign&xmlString=requiredxmlString&responseType=XML</p><h4 class=\"western\">Prerequisites to perform a Retrieve operation</h4><p class=\"western\">To perform a Retrieve operation for retrieving a Campaign SMS using the FranConnect API, you must make a POST request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters:</p><ol><li><p>An access token as a key. Steps on how an access token is generated is documented <u><a href=\"#tag/Authentication\">here</a></u>.</p></li><li><p>The module for which the Retrieve operation is being performed. In this case, the module to be used is “cm”</u>.</p></li><li><p>The sub-module for which the Retrieve operation is being performed. A list of all sub-modules can be retrieved from the “subModule” endpoint mentioned <span style=\"color: #0563c1;\"><u><a href=\"#tag/List-of-Sub-Modules\">here</a></u></span>. In this case, the subModule to be used is “SMSCampaign”.</p></li><li><p>Response type as XML or JSON, depending on the type of response that is desired. If this parameter is not provided, the default response type is XML.</p></li><li><p class=\"western\">xmlString that would contain the attribute names and their values in the request that is to be used to retrieve a Campaign SMS. In order to determine the parameter names/ schema, a query operation is to be performed with the corresponding module and sub-module names and the operation as Retrieve. Details on how the query operation is to be performed is mentioned <u><a href=\"#tag/List-of-Field-Names\">here.</a></u></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve sales reports periods": {
      "get": {
        "tags": [
          "Sales Reports"
        ],
        "summary": "Retrieve Sales Reports Periods",
        "description": "<p class=\"western\">The report period in Finance > Sales refers to that time duration for which sales is to be reported by the franchisees. The report period for each location is defined in the financial agreement that is associated with that location.</p><p class=\"western\">You must make a GET request to the request URL, along with other required details, to retrieve the report periods. This would provide a list of all the report periods for which sales is to be reported by the franchisees.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;: </strong>GET</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/sales/periods/franchiseeNo/{id}</p>To retrieve the report periods for which sales data has not been entered for a particular franchisee location, you must make a GET request on the request URL. The request URL comprises of the context path followed by the API endpoint mentioned above. The following items must be used as path parameters: <ol><li><p>\"Authorization\" as the key and its value in the format \"Bearer access_token\". This access_token is generated as a part of authentication. Click <u><a href=\"#tag/Authentication\">here</a></u> for details on the steps to generate the access token.<br>Note that you are required to select the option <strong>Inherit auth from parent</strong> for the <strong>Type</strong> field under the <strong>Authorization</strong> tab before generating the access token.</p></li><li><p>&ldquo;Content-Type&rdquo; as the key and its value in the format &ldquo;application/json&rdquo;.</p></li><li><p>&ldquo;X-TenantId&rdquo; as the key and its value based on your FranConnect system&rsquo;s URL. Click <u><a href=\"#tag/Authentication\">here</a></u>&nbsp;for details on identifying the &ldquo;X-TenantId&rdquo;.</p></li><li><p>Franchisee number as the internal unique reference number of the location. Click <u><a href=\"#tag/Retrieve-Franchisee-Number\">here</a></u> for details on retrieving the franchisee number. </p></li></ol><p class=\"western\">Performing the above mentioned steps would return all the report periods for which sales has not been reported by that location.</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve finance categories": {
      "get": {
        "tags": [
          "Sales Reports"
        ],
        "summary": "Retrieve Finance Categories",
        "description": "<p class=\"western\">Finance categories are an important part of the sales report. These represent the categories that are used to report Sales data. To retrieve all the finance categories, you must use the report period as input parameter for the GET request. Click <u><a href=\"#tag/Sales-Reports\">here</a></u> for details on retrieving these report periods.</p><p>Then, use this report period, and perform a GET request to retrieve a list of financial categories that are available to report the sales for the given report period. </p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;:  </strong>GET</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/sales/categories/finance-categories/franchiseeNo/{franchisee_number}/reportPeriod/{reportPeriod}</p>",
        "operationId": "Finance_Categories",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve non finance categories": {
      "get": {
        "tags": [
          "Sales Reports"
        ],
        "summary": "Retrieve Non Finance Categories",
        "description": "<p class=\"western\">Non-Finance categories represent the categories that are not financial in nature but are still tracked as a part of sales reports (such as customer count and loyalty program enrollments). Every sales report has at least one non-finance category in it. To retrieve all the non-finance/Key Performance Indicator (KPI) categories that are used in sales report, you must use a report period and its corresponding finance categories as input parameters for the GET request. Click <u><a href=\"#tag/Sales-Reports\">Report Periods</a></u> for details on retrieving these report periods and click <u><a href=\"#tag/Sales-Reports\">Finance Categories</a></u> for details on retrieving these finance categories.</p><p>Then, using these parameters, perform a GET request to retrieve a list of non finance categories that are available to report the sales for the given report period.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;:  </strong>GET</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/sales/categories/kpi-categories/franchiseeNo/{franchisee_number}/reportPeriod/{reportPeriod} </p><p><strong>Note:</strong> Sometimes, you may not have non-finance categories set up in your sales report. If this is the case, you need not retrieve the non-finance categories.</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve additional invoice items": {
      "get": {
        "tags": [
          "Sales Reports"
        ],
        "summary": "Retrieve Additional Invoice Items",
        "description": "<p class=\"western\">There are some additional invoice items that can be included in the sales report apart from the finance and non-finance categories. To retrieve these additional invoice items, you must use a report period as input parameter for the GET request. Click <u><a href=\"#tag/Sales-Reports\">Report Periods</a></u> for details on retrieving these report periods.</p><p>Then, use this report period, and perform a GET operation to retrieve a list of additional invoice items that are available to report the sales for the given report period.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;: </strong>GET</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/sales/categories/addtional-line-items/franchiseeNo/{franchisee_number}/reportPeriod/{reportPeriod} </p><p><strong>Note:</strong> Configuring the additional invoice items is optional. In case you have not configured these as part of your sales report and still if you try retrieving them using the above mentioned endpoint, an empty data set is retrieved.</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve sales report status": {
      "get": {
        "tags": [
          "Sales Reports"
        ],
        "summary": "Retrieve Sales Report Status",
        "description": "<p class=\"western\">Following table lists the various status that can be attributed to sales reports and can therefore be used as a search constraint in retrieve operations.</p><p class=\"western\">&nbsp;</p><center><table width=\"762\" cellspacing=\"0\" cellpadding=\"6\"><colgroup><col width=\"144\" /> <col width=\"592\" /> </colgroup><tbody><tr valign=\"top\"><td style=\"background: #5b9bd5;\" bgcolor=\"#5b9bd5\" width=\"144\"><p class=\"western\"><strong>Key</strong></p></td><td style=\"background: #5b9bd5;\" bgcolor=\"#5b9bd5\" width=\"592\"><p class=\"western\"><strong>Name</strong></p></td></tr><tr valign=\"top\"><td style=\"background: #deeaf6;\" bgcolor=\"#deeaf6\" width=\"144\"><p class=\"western\"><strong>P</strong></p></td><td style=\"background: #deeaf6;\" bgcolor=\"#deeaf6\" width=\"592\"><p class=\"western\">Waiting for approval</p></td></tr><tr valign=\"top\"><td style=\"background: #ffffff;\" bgcolor=\"#ffffff\" width=\"144\"><p class=\"western\"><strong>A</strong></p></td><td style=\"background: #ffffff;\" bgcolor=\"#ffffff\" width=\"592\"><p class=\"western\">Approved</p></td></tr><tr valign=\"top\"><td style=\"background: #deeaf6;\" bgcolor=\"#deeaf6\" width=\"144\"><p class=\"western\"><strong>R</strong></p></td><td style=\"background: #deeaf6;\" bgcolor=\"#deeaf6\" width=\"592\"><p class=\"western\">Rejected</p></td></tr><tr valign=\"top\"><td style=\"background: #ffffff;\" bgcolor=\"#ffffff\" width=\"144\"><p class=\"western\"><strong>I</strong></p></td><td style=\"background: #ffffff;\" bgcolor=\"#ffffff\" width=\"592\"><p class=\"western\">Invoiced</p></td></tr><tr valign=\"top\"><td style=\"background: #deeaf6;\" bgcolor=\"#deeaf6\" width=\"144\"><p class=\"western\"><strong>K</strong></p></td><td style=\"background: #deeaf6;\" bgcolor=\"#deeaf6\" width=\"592\"><p class=\"western\">Waiting for Acknowledgement</p></td></tr></tbody></table></center><p class=\"western\">&nbsp;</p><p class=\"western\">You must make a GET request to the API endpoint, along with other required details, to retrieve the report status and their corresponding keys.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;: </strong>GET</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/sales/status </p><p><strong>Note:</strong> Configuring the additional invoice items is optional. In case you have not configured these as part of your sales report and still if you try retrieving them using the above mentioned endpoint, an empty data set is retrieved.</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/create new sales report": {
      "post": {
        "tags": [
          "Sales Reports"
        ],
        "summary": "Create New Sales Report",
        "description": "<p class=\"western\">Sales reports allow locations to declare their proceeds during that report period. These are comprised of finance and non-finance categories. Sometimes, the sales report may contain additional invoice items. A sales report can be created for a location for that time duration for which sales is to be reported by the franchisees. In order to do so, a POST type request is to be made to the specified endpoint.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;: </strong>POST</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/sales/status </p>The following items must be included in the body of the request:<ol><li><p>\"Authorization\" as the key and its value in the format \"Bearer access_token\". This access_token is generated as a part of authentication. Click <u><a href=\"#tag/Authentication\">here</a></u> for details on the steps to generate the access token.<br>Note that you are required to select the option <strong>Inherit auth from parent</strong> for the <strong>Type</strong> field under the <strong>Authorization</strong> tab before generating the access token.</p></li><li><p>&ldquo;Content-Type&rdquo; as the key and its value in the format &ldquo;application/json&rdquo;.</p></li><li><p>&ldquo;X-TenantId&rdquo; as the key and its value based on your FranConnect system&rsquo;s URL. Click <u><a href=\"#tag/Authentication\">here</a></u>&nbsp;for details on identifying the &ldquo;X-TenantId&rdquo;.</p></li><li><p><u><a href=\"#operation/Finance_Categories\"Finance categories</a></u>, non-finance categories and additional line items must be included in the body of the request. </p></li></ol><p class=\"western\">Performing the above mentioned steps would create the sales report. The response provides the “reportNo” and “salesReportID”. The “reportNo” represents the sales report number as displayed on the application user interface and the “salesReportID” is the internal unique identifier for that sales report.</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve sales": {
      "post": {
        "tags": [
          "Sales Reports"
        ],
        "summary": "Retrieve Sales Report",
        "description": "<p class=\"western\">You can retrieve an existing sales report by making a POST type request to the specified endpoint.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;: </strong>POST</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/sales/filter </p>The following items must be included in the body of the request:<ol><li><p>\"Authorization\" as the key and its value in the format \"Bearer access_token\". This access_token is generated as a part of authentication. Click <u><a href=\"#tag/Authentication\">here</a></u> for details on the steps to generate the access token.<br>Note that you are required to select the option <strong>Inherit auth from parent</strong> for the <strong>Type</strong> field under the <strong>Authorization</strong> tab before generating the access token.</p></li><li><p>&ldquo;Content-Type&rdquo; as the key and its value in the format &ldquo;application/json&rdquo;.</p></li><li><p>&ldquo;X-TenantId&rdquo; as the key and its value based on your FranConnect system&rsquo;s URL. Click <u><a href=\"#tag/Authentication\">here</a></u>&nbsp;for details on identifying the &ldquo;X-TenantId&rdquo;.</p></li><li><p>The constraints that would be used to filter out the sales report must be included in the body of the request. </p></li></ol><p class=\"western\">In the example that is included, the “franchiseeNo” has been used as a ‘constraints’ criterion. Other acceptable values of constraints that can be used to filter and retrieve sales reports are explained in the following table:</p><center><table width=\"623\" cellspacing=\"0\" cellpadding=\"7\"><colgroup><col width=\"157\" /> <col width=\"135\" /> <col width=\"223\" /> <col width=\"51\" /> </colgroup><tbody><tr valign=\"top\"><td style=\"background: #4472c4;\" bgcolor=\"#4472c4\" width=\"157\"><p class=\"western\" align=\"center\"><strong><span style=\"color: #00000a;\">Field</span></strong></p><p class=\"western\" align=\"center\">&nbsp;</p></td><td style=\"background: #4472c4;\" bgcolor=\"#4472c4\" width=\"135\"><p class=\"western\" align=\"center\"><strong><span style=\"color: #00000a;\">Field Description</span></strong></p></td><td style=\"background: #4472c4;\" bgcolor=\"#4472c4\" width=\"223\"><p class=\"western\" align=\"center\"><strong><span style=\"color: #00000a;\">Applied Clause</span></strong></p><p class=\"western\" align=\"center\">&nbsp;</p></td><td style=\"background: #4472c4;\" bgcolor=\"#4472c4\" width=\"51\"><p class=\"western\" align=\"center\"><strong><span style=\"color: #00000a;\">Format</span></strong></p></td></tr><tr valign=\"top\"><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"157\"><p class=\"western\" align=\"center\"><strong>reportNo</strong></p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"135\"><p class=\"western\" align=\"center\">Sales Report Number as seen in UI</p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"223\"><p class=\"western\" align=\"center\">EQUAL, IN</p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"51\"><p class=\"western\" align=\"center\">String</p></td></tr><tr valign=\"top\"><td width=\"157\"><p class=\"western\" align=\"center\"><strong>salesReportID</strong></p></td><td width=\"135\"><p class=\"western\" align=\"center\">Internal Unique Reference Number of the Sales Report</p></td><td width=\"223\"><p class=\"western\" align=\"center\">EQUAL, IN</p></td><td width=\"51\"><p class=\"western\" align=\"center\">String</p></td></tr><tr valign=\"top\"><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"157\"><p class=\"western\" align=\"center\"><strong>franchiseeNo</strong></p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"135\"><p class=\"western\" align=\"center\">Internal Unique Reference Number of the location</p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"223\"><p class=\"western\" align=\"center\">EQUAL, IN</p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"51\"><p class=\"western\" align=\"center\">String</p></td></tr><tr valign=\"top\"><td width=\"157\"><p class=\"western\" align=\"center\"><strong>reportPeriodStart/End</strong></p></td><td width=\"135\"><p class=\"western\" align=\"center\">Report Period Start/ End Date in YYYY-MM-DD format</p></td><td width=\"223\"><p class=\"western\" align=\"center\">EQUAL, GREATER_THAN,</p><p class=\"western\" align=\"center\">LESS_THAN, GREATER_THAN_OR_EQUAL,</p><p class=\"western\" align=\"center\">LESS_THAN_OR_EQUAL, BETWEEN</p></td><td width=\"51\"><p class=\"western\" align=\"center\">Date</p></td></tr><tr valign=\"top\"><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"157\"><p class=\"western\" align=\"center\"><strong>reportSubmitDate</strong></p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"135\"><p class=\"western\" align=\"center\">Report Submit Date in YYYY-MM-DD format</p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"223\"><p class=\"western\" align=\"center\">EQUAL, GREATER_THAN,</p><p class=\"western\" align=\"center\">LESS_THAN, GREATER_THAN_OR_EQUAL,</p><p class=\"western\" align=\"center\">LESS_THAN_OR_EQUAL, BETWEEN</p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"51\"><p class=\"western\" align=\"center\">Date</p></td></tr><tr valign=\"top\"><td width=\"157\"><p class=\"western\" align=\"center\"><strong>totalSales</strong></p></td><td width=\"135\"><p class=\"western\" align=\"center\">Total Sales</p></td><td width=\"223\"><p class=\"western\" align=\"center\">GREATER_THAN,</p><p class=\"western\" align=\"center\">LESS_THAN</p></td><td width=\"51\"><p class=\"western\" align=\"center\">String</p></td></tr><tr valign=\"top\"><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"157\"><p class=\"western\" align=\"center\"><strong>reportStatus</strong></p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"135\"><p class=\"western\" align=\"center\">Report Status of the Sales Report</p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"223\"><p class=\"western\" align=\"center\">EQUAL, IN</p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"51\"><p class=\"western\" align=\"center\">String</p></td></tr><tr valign=\"top\"><td width=\"157\"><p class=\"western\" align=\"center\"><strong>reportType</strong></p></td><td width=\"135\"><p class=\"western\" align=\"center\">Report Type of the Sales Report</p></td><td width=\"223\"><p class=\"western\" align=\"center\">EQUAL, IN</p></td><td width=\"51\"><p class=\"western\" align=\"center\">String</p></td></tr></tbody></table></center><p class=\"western\">&nbsp;</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/update existing sales report": {
      "put": {
        "tags": [
          "Sales Reports"
        ],
        "summary": "Update Existing Sales Report",
        "description": "<p class=\"western\">You can update an existing sales report by making a PUT type request to the specified endpoint.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;: </strong>PUT</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/sales/{salesReportID} </p>The following items must be included in the body of the request:<ol><li><p>\"Authorization\" as the key and its value in the format \"Bearer access_token\". This access_token is generated as a part of authentication. Click <u><a href=\"#tag/Authentication\">here</a></u> for details on the steps to generate the access token.<br>Note that you are required to select the option <strong>Inherit auth from parent</strong> for the <strong>Type</strong> field under the <strong>Authorization</strong> tab before generating the access token.</p></li><li><p>&ldquo;Content-Type&rdquo; as the key and its value in the format &ldquo;application/json&rdquo;.</p></li><li><p>&ldquo;X-TenantId&rdquo; as the key and its value based on your FranConnect system&rsquo;s URL. Click <u><a href=\"#tag/Authentication\">here</a></u>&nbsp;for details on identifying the &ldquo;X-TenantId&rdquo;.</p></li><li><p>The “salesReportID” refers to the internal unique ID for the sales report. You can fetch this information by retrieving the sales report details on the basis of report number “reportNo” or any other constraint.</p></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve royalty invoices": {
      "post": {
        "tags": [
          "Royalties"
        ],
        "summary": "Retrieve Royalty Invoices",
        "description": "<p class=\"western\">Royalty reports are generated on the basis of sales submitted for the locations. The method for retrieving a Royalty report is similar to that of retrieving a Sales report. To retrieve a royalty report, a POST of request is to be made to the specified endpoint.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;: </strong>POST</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/royalties/filter </p>The following items must be included in the body of the request:<ol><li><p>\"Authorization\" as the key and its value in the format \"Bearer access_token\". This access_token is generated as a part of authentication. Click <u><a href=\"#tag/Authentication\">here</a></u> for details on the steps to generate the access token.<br>Note that you are required to select the option <strong>Inherit auth from parent</strong> for the <strong>Type</strong> field under the <strong>Authorization</strong> tab before generating the access token.</p></li><li><p>&ldquo;Content-Type&rdquo; as the key and its value in the format &ldquo;application/json&rdquo;.</p></li><li><p>&ldquo;X-TenantId&rdquo; as the key and its value based on your FranConnect system&rsquo;s URL. Click <u><a href=\"#tag/Authentication\">here</a></u>&nbsp;for details on identifying the &ldquo;X-TenantId&rdquo;.</p></li><li><p>The constraints that would be used to filter out the royalty invoices must be included in the body of the request. </p></li></ol><p class=\"western\">The following table lists all the attributes that can be used as constraints while retrieving royalty reports along with the “clauses” that are supported for each constraint.</p><center><table width=\"735\" cellspacing=\"0\" cellpadding=\"7\"><colgroup><col width=\"134\" /> <col width=\"253\" /> <col width=\"223\" /> <col width=\"66\" /> </colgroup><tbody><tr valign=\"top\"><td style=\"background: #4472c4;\" bgcolor=\"#4472c4\" width=\"134\" height=\"30\"><p class=\"western\"><span style=\"color: #ffffff;\"><strong>Field</strong></span></p></td><td style=\"background: #4472c4;\" bgcolor=\"#4472c4\" width=\"253\"><p class=\"western\"><span style=\"color: #ffffff;\"><strong>Field Display Name</strong></span></p></td><td style=\"background: #4472c4;\" bgcolor=\"#4472c4\" width=\"223\"><p class=\"western\"><span style=\"color: #ffffff;\"><strong>Applicable Clauses</strong></span></p></td><td style=\"background: #4472c4;\" bgcolor=\"#4472c4\" width=\"66\"><p class=\"western\"><span style=\"color: #ffffff;\"><strong>Format</strong></span></p></td></tr><tr valign=\"top\"><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"134\"><p class=\"western\"><strong>franchiseeRoyaltyID</strong></p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"253\"><p class=\"western\">Internal Unique Reference Number of the Royalty Invoicce</p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"223\"><p class=\"western\">EQUAL, IN</p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"66\"><p class=\"western\">String</p></td></tr><tr valign=\"top\"><td width=\"134\" height=\"9\"><p class=\"western\"><strong>invoiceNO</strong></p></td><td width=\"253\"><p class=\"western\">Royalty Invoice Number as seen in UI</p></td><td width=\"223\"><p class=\"western\">EQUAL, IN</p></td><td width=\"66\"><p class=\"western\">String</p></td></tr><tr valign=\"top\"><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"134\"><p class=\"western\"><strong>franchiseeNo</strong></p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"253\"><p class=\"western\">Internal Unique Reference Number of the location</p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"223\"><p class=\"western\">EQUAL, IN</p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"66\"><p class=\"western\">String</p></td></tr><tr valign=\"top\"><td width=\"134\" height=\"85\"><p class=\"western\"><strong>invoiceDate</strong></p></td><td width=\"253\"><p class=\"western\">Invoice Date</p></td><td width=\"223\"><p class=\"western\">EQUAL, GREATER_THAN,</p><p class=\"western\">LESS_THAN, GREATER_THAN_OR_EQUAL,</p><p class=\"western\">LESS_THAN_OR_EQUAL, BETWEEN</p></td><td width=\"66\"><p class=\"western\">Date</p></td></tr><tr valign=\"top\"><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"134\"><p class=\"western\"><strong>paymentStatus</strong></p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"253\"><p class=\"western\">Payment Status</p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"223\"><p class=\"western\">EQUAL, IN</p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"66\"><p class=\"western\">String</p></td></tr></tbody></table></center><p class=\"western\">&nbsp;</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/get royalties payment status": {
      "get": {
        "tags": [
          "Royalties"
        ],
        "summary": "Retrieve Royalties Payment Status",
        "description": "<p class=\"western\">You can retrieve the payment status for Royalty reports by making a GET request to the specified endpoint.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;: </strong>GET</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/royalties/status</p>The following items must be used as path parameters:<ol><li><p>\"Authorization\" as the key and its value in the format \"Bearer access_token\". This access_token is generated as a part of authentication. Click <u><a href=\"#tag/Authentication\">here</a></u> for details on the steps to generate the access token.<br>Note that you are required to select the option <strong>Inherit auth from parent</strong> for the <strong>Type</strong> field under the <strong>Authorization</strong> tab before generating the access token.</p></li><li><p>&ldquo;Content-Type&rdquo; as the key and its value in the format &ldquo;application/json&rdquo;.</p></li><li><p>&ldquo;X-TenantId&rdquo; as the key and its value based on your FranConnect system&rsquo;s URL. Click <u><a href=\"#tag/Authentication\">here</a></u>&nbsp;for details on identifying the &ldquo;X-TenantId&rdquo;.</p></li></ol><p class=\"western\">Performing the above mentioned steps would return a list of royalty payment status that are available in the system along with their corresponding keys. The following table lists the different royalty payment status along with their corresponding keys:</p><center><table width=\"762\" cellspacing=\"0\" cellpadding=\"7\"><colgroup><col width=\"228\" /> <col width=\"505\" /> </colgroup><tbody><tr valign=\"top\"><td style=\"background: #4472c4;\" bgcolor=\"#4472c4\" width=\"228\"><p class=\"western\"><span style=\"color: #ffffff;\"><strong>Key</strong></span></p></td><td style=\"background: #4472c4;\" bgcolor=\"#4472c4\" width=\"505\"><p class=\"western\"><span style=\"color: #ffffff;\"><strong>Payment Status</strong></span></p></td></tr><tr valign=\"top\"><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"228\"><p class=\"western\"><strong>N</strong></p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"505\"><p class=\"western\">Unpaid</p></td></tr><tr valign=\"top\"><td width=\"228\"><p class=\"western\"><strong>P</strong></p></td><td width=\"505\"><p class=\"western\">Partially Paid</p></td></tr><tr valign=\"top\"><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"228\"><p class=\"western\"><strong>C</strong></p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"505\"><p class=\"western\">Fully Paid</p></td></tr></tbody></table></center>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve payments": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Retrieve Payments",
        "description": "<p class=\"western\">You can retrieve the payments that were made against a royalty report by making a POST request to the Payments endpoint.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;: </strong>POST</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/payments/filter</p>The following items must be included in the body of the request:<ol><li><p>\"Authorization\" as the key and its value in the format \"Bearer access_token\". This access_token is generated as a part of authentication. Click <u><a href=\"#tag/Authentication\">here</a></u> for details on the steps to generate the access token.<br>Note that you are required to select the option <strong>Inherit auth from parent</strong> for the <strong>Type</strong> field under the <strong>Authorization</strong> tab before generating the access token.</p></li><li><p>&ldquo;Content-Type&rdquo; as the key and its value in the format &ldquo;application/json&rdquo;.</p></li><li><p>&ldquo;X-TenantId&rdquo; as the key and its value based on your FranConnect system&rsquo;s URL. Click <u><a href=\"#tag/Authentication\">here</a></u>&nbsp;for details on identifying the &ldquo;X-TenantId&rdquo;.</p></li><li><p>The constraints that would be used to filter out the payments must be included in the body of the request. </p></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve p&l statements periods": {
      "get": {
        "tags": [
          "Profit and Loss Statements"
        ],
        "summary": "Retrieve Profit and Loss Periods",
        "description": "<p class=\"western\">You can retrieve the Profit and Loss report periods for a location for that time duration for which sales is to be reported by the franchisees. In order to do so, a GET request is to be made to the specified endpoint.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;: </strong>GET</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/profit-loss/periods/franchiseeNo/{franchise_number}</p>The following items must be used as path parameters:<ol><li><p>\"Authorization\" as the key and its value in the format \"Bearer access_token\". This access_token is generated as a part of authentication. Click <u><a href=\"#tag/Authentication\">here</a></u> for details on the steps to generate the access token.<br>Note that you are required to select the option <strong>Inherit auth from parent</strong> for the <strong>Type</strong> field under the <strong>Authorization</strong> tab before generating the access token.</p></li><li><p>&ldquo;Content-Type&rdquo; as the key and its value in the format &ldquo;application/json&rdquo;.</p></li><li><p>&ldquo;X-TenantId&rdquo; as the key and its value based on your FranConnect system&rsquo;s URL. Click <u><a href=\"#tag/Authentication\">here</a></u>&nbsp;for details on identifying the &ldquo;X-TenantId&rdquo;.</p></li></ol><p class=\"western\">Performing the above mentioned steps would return a list of all the statement periods for which Profit and Loss statement has not been declared by that location.</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve profit loss categories": {
      "get": {
        "tags": [
          "Profit and Loss Statements"
        ],
        "summary": "Retrieve Profit Loss Categories",
        "description": "<p class=\"western\">You can retrieve the Profit and Loss categories that are present in the Profit and Loss statements for each franchisee against which income and expenses are to be entered. In order to do so, a GET request is to be made to the specified endpoint.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;: </strong>GET</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/profit-loss/categories</p>The following items must be used as path parameters:<ol><li><p>\"Authorization\" as the key and its value in the format \"Bearer access_token\". This access_token is generated as a part of authentication. Click <u><a href=\"#tag/Authentication\">here</a></u> for details on the steps to generate the access token.<br>Note that you are required to select the option <strong>Inherit auth from parent</strong> for the <strong>Type</strong> field under the <strong>Authorization</strong> tab before generating the access token.</p></li><li><p>&ldquo;Content-Type&rdquo; as the key and its value in the format &ldquo;application/json&rdquo;.</p></li><li><p>&ldquo;X-TenantId&rdquo; as the key and its value based on your FranConnect system&rsquo;s URL. Click <u><a href=\"#tag/Authentication\">here</a></u>&nbsp;for details on identifying the &ldquo;X-TenantId&rdquo;.</p></li></ol><p class=\"western\">Performing the above mentioned steps would return a response that contains all the profit and loss categories that are configured in the system and a placeholder where the amount can be entered against that corresponding category. You can use this information to add the profit and loss details while creating and/ or updating profit and loss reports.</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/create new profit loss statements": {
      "post": {
        "tags": [
          "Profit and Loss Statements"
        ],
        "summary": "Create New Profit Loss Statements",
        "description": "<p class=\"western\">You can create new Profit and Loss statements in the system by making a POST request to the specified endpoint.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;: </strong>POST</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/profit-loss</p>The following items must be included in the body of the request:<ol><li><p>\"Authorization\" as the key and its value in the format \"Bearer access_token\". This access_token is generated as a part of authentication. Click <u><a href=\"#tag/Authentication\">here</a></u> for details on the steps to generate the access token.<br>Note that you are required to select the option <strong>Inherit auth from parent</strong> for the <strong>Type</strong> field under the <strong>Authorization</strong> tab before generating the access token.</p></li><li><p>&ldquo;Content-Type&rdquo; as the key and its value in the format &ldquo;application/json&rdquo;.</p></li><li><p>&ldquo;X-TenantId&rdquo; as the key and its value based on your FranConnect system&rsquo;s URL. Click <u><a href=\"#tag/Authentication\">here</a></u>&nbsp;for details on identifying the &ldquo;X-TenantId&rdquo;.</p></li><li><p>The profit and loss categories must be included in the body of the request. Click <u><a href=\"#tag/Authentication\">here for details on retrieving the Profit and Loss categories.</p></li></ol><p class=\"western\">If the Create operation is successful, performing the above mentioned steps would return a response containing the \"plrepld\". This represents the internal reference ID for the Profit and Loss statements that was just created and can be used for the update and the retrieve operations.</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/retrieve profit loss statements": {
      "post": {
        "tags": [
          "Profit and Loss Statements"
        ],
        "summary": "Retrieve Profit Loss Statements",
        "description": "<p class=\"western\">You can retrieve an existing Profit and Loss statement in the system by making a POST request to the specified endpoint.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;: </strong>POST</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/profit-loss/filter</p>The following items must be included in the body of the request:<ol><li><p>\"Authorization\" as the key and its value in the format \"Bearer access_token\". This access_token is generated as a part of authentication. Click <u><a href=\"#tag/Authentication\">here</a></u> for details on the steps to generate the access token.<br>Note that you are required to select the option <strong>Inherit auth from parent</strong> for the <strong>Type</strong> field under the <strong>Authorization</strong> tab before generating the access token.</p></li><li><p>&ldquo;Content-Type&rdquo; as the key and its value in the format &ldquo;application/json&rdquo;.</p></li><li><p>&ldquo;X-TenantId&rdquo; as the key and its value based on your FranConnect system&rsquo;s URL. Click <u><a href=\"#tag/Authentication\">here</a></u>&nbsp;for details on identifying the &ldquo;X-TenantId&rdquo;.</p></li><li><p>The constraints that would be used to filter out the profit and loss report must be included in the body of the request.</p></li></ol><p class=\"western\">The following table details the other values that can be used as constraints along with their clause criteria:</p><center><table width=\"720\" cellspacing=\"0\" cellpadding=\"7\"><colgroup><col width=\"147\" /> <col width=\"127\" /> <col width=\"306\" /> <col width=\"82\" /> </colgroup><tbody><tr valign=\"top\"><td style=\"background: #4472c4;\" bgcolor=\"#4472c4\" width=\"147\" height=\"8\"><p class=\"western\"><span style=\"color: #ffffff;\"><strong>Field</strong></span></p></td><td style=\"background: #4472c4;\" bgcolor=\"#4472c4\" width=\"127\"><p class=\"western\"><span style=\"color: #ffffff;\"><strong>Field Display Name</strong></span></p></td><td style=\"background: #4472c4;\" bgcolor=\"#4472c4\" width=\"306\"><p class=\"western\"><span style=\"color: #ffffff;\"><strong>Applied Clause</strong></span></p></td><td style=\"background: #4472c4;\" bgcolor=\"#4472c4\" width=\"82\"><p class=\"western\"><span style=\"color: #ffffff;\"><strong>Format</strong></span></p></td></tr><tr valign=\"top\"><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"147\"><p class=\"western\"><strong><span lang=\"en\">plrepId</span></strong></p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"127\"><p class=\"western\"><span lang=\"en\">Internal Unique Reference Number of the P&amp;L Report</span></p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"306\"><p class=\"western\"><span lang=\"en\">EQUAL, IN</span></p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"82\"><p class=\"western\"><span lang=\"en\">String</span></p></td></tr><tr valign=\"top\"><td width=\"147\"><p class=\"western\"><strong><span lang=\"en\">franchiseeNo</span></strong></p></td><td width=\"127\"><p class=\"western\">Internal Unique Reference Number of the location</p></td><td width=\"306\"><p class=\"western\"><span lang=\"en\">EQUAL, IN</span></p></td><td width=\"82\"><p class=\"western\"><span lang=\"en\">String</span></p></td></tr><tr valign=\"top\"><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"147\" height=\"73\"><p class=\"western\"><strong><span lang=\"en\">statementPeriod</span></strong></p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"127\"><p class=\"western\"><span lang=\"en\">Statement Period</span></p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"306\"><p class=\"western\"><span lang=\"en\">EQUAL, GREATER_THAN,</span></p><p class=\"western\"><span lang=\"en\">LESS_THAN, GREATER_THAN_OR_EQUAL,</span></p><p class=\"western\"><span lang=\"en\">LESS_THAN_OR_EQUAL, BETWEEN</span></p></td><td style=\"background: #d9e2f3;\" bgcolor=\"#d9e2f3\" width=\"82\"><p class=\"western\"><span lang=\"en\">Date</span></p></td></tr><tr valign=\"top\"><td width=\"147\" height=\"77\"><p class=\"western\"><strong><span lang=\"en\">submissionDate</span></strong></p></td><td width=\"127\"><p class=\"western\"><span lang=\"en\">Submission Date</span></p></td><td width=\"306\"><p class=\"western\"><span lang=\"en\">EQUAL, GREATER_THAN,</span></p><p class=\"western\"><span lang=\"en\">LESS_THAN, GREATER_THAN_OR_EQUAL,</span></p><p class=\"western\"><span lang=\"en\">LESS_THAN_OR_EQUAL, BETWEEN</span></p></td><td width=\"82\"><p class=\"western\"><span lang=\"en\">Date</span></p></td></tr></tbody></table></center><p class=\"western\">&nbsp;</p><p class=\"western\"><strong>Note</strong>: Multiple constraints can be used in the filter to retrieve data.</p><p class=\"western\">&nbsp;</p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    },
    "/dataservices/update exising profit/loss statement": {
      "post": {
        "tags": [
          "Profit and Loss Statements"
        ],
        "summary": "Update Existing Profit/Loss Statement",
        "description": "<p class=\"western\">You can update an existing profit and loss report by making a PUT request to the specified endpoint.</p><p class=\"western\"><strong>Operation Name&nbsp;&nbsp;: </strong>PUT</p><p class=\"western\"><strong>API Endpoint&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: </strong>/finance.franconnect.net/manage-finance/profit-loss/{plrepId} </p>The following items must be included in the body of the request:<ol><li><p>\"Authorization\" as the key and its value in the format \"Bearer access_token\". This access_token is generated as a part of authentication. Click <u><a href=\"#tag/Authentication\">here</a></u> for details on the steps to generate the access token.<br>Note that you are required to select the option <strong>Inherit auth from parent</strong> for the <strong>Type</strong> field under the <strong>Authorization</strong> tab before generating the access token.</p></li><li><p>&ldquo;Content-Type&rdquo; as the key and its value in the format &ldquo;application/json&rdquo;.</p></li><li><p>&ldquo;X-TenantId&rdquo; as the key and its value based on your FranConnect system&rsquo;s URL. Click <u><a href=\"#tag/Authentication\">here</a></u>&nbsp;for details on identifying the &ldquo;X-TenantId&rdquo;.</p></li><li><p>The profit and loss categories must be included in the body of the request.Click <u><a href=\"#tag/Authentication\">here</a></u> for details on retrieving the profit and loss categories.</p></li></ol></p>",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/FSCreateLeadArray"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AdminSubModule": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "responseType": {
            "type": "string"
          }
        },
        "XML": {
          "name": "fsMail"
        }
      },
      "CreateSchema": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "subModule": {
            "type": "string"
          },
          "operation": {
            "type": "string"
          },
          "roleTypeForQuery": {
            "type": "integer"
          }
        },
        "xml": {
          "name": "fsMail"
        }
      },
      "FSCreateLead": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "subModule": {
            "type": "string"
          },
          "xmlString": {
            "type": "string"
          },
          "responseType": {
            "type": "string"
          }
        },
        "xml": {
          "name": "fsMail"
        }
      }
    },
    "requestBodies": {
      "CreateSchemaArray": {
        "content": {
          "application/xml": {
            "example": "POST /<context-path>/rest/dataservices/query HTTP/1.1\nContent-type: application/x-www-form-urlencoded/key=key&module=admin&subModule=user&roleTypeForQuery=1&operation=create",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CreateSchema"
              },
              "xml": {
                "wrapped": true
              }
            }
          }
        },
        "description": "Lead Creation object",
        "required": true
      },
      "RetrieveSchemaArray": {
        "content": {
          "application/xml": {
            "example": "POST /<context-path>/rest/dataservices/query HTTP/1.1\nContent-type: application/x-www-form-urlencoded/key=key&module=admin&subModule=user&operation=retrieve",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CreateSchema"
              },
              "xml": {
                "wrapped": true
              }
            }
          }
        },
        "description": "Lead Creation object",
        "required": true
      },
      "UpdateSchemaArray": {
        "content": {
          "application/xml": {
            "example": "POST /<context-path>/rest/dataservices/query HTTP/1.1\nContent-type: application/x-www-form-urlencoded/key=key&module=admin&subModule=user&roleTypeForQuery=1&operation=update",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CreateSchema"
              },
              "xml": {
                "wrapped": true
              }
            }
          }
        },
        "description": "Lead Creation object",
        "required": true
      },
      "DeleteSchemaArray": {
        "content": {
          "application/xml": {
            "example": "POST /<context-path>/rest/dataservices/query HTTP/1.1\nContent-type: application/x-www-form-urlencoded/key=key&module=admin&subModule=user&operation=delete",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CreateSchema"
              },
              "xml": {
                "wrapped": true
              }
            }
          }
        },
        "description": "Lead Creation object",
        "required": true
      },
      "FSCreateLeadArray": {
        "content": {
          "application/xml": {
            "example": "<?xml version='1.0' encoding='utf-8'?>\n<fcRequest>\n<fsLead>\n<salutation>Mr.</salutation>\n<firstName>Josn</firstName>\n<lastName>Marsh</lastName>\n<address>100 Main St</address>\n<address2></address2>\n<city>Seattle</city>\n<country>USA</country>\n<stateID>Washington</stateID>\n<sendAutomaticMail>Yes</sendAutomaticMail>\n<zip>98102</zip>\n<countyID>Adams</countyID>\n<primaryPhoneToCall>Email</primaryPhoneToCall>\n<bestTimeToContact></bestTimeToContact>\n<phone></phone>\n<phoneExt></phoneExt>\n<homePhone></homePhone>\n<homePhoneExt></homePhoneExt>\n<fax></fax>\n<mobile></mobile>\n<emailID>support@franconnect.com</emailID>\n<companyName></companyName>\n<comments>Newly added lead in this area</comments>\n<basedOnAssignmentRule>Yes</basedOnAssignmentRule>\n<leadOwnerID>Chris Barlow</leadOwnerID>\n<leadRatingID>Warm</leadRatingID>\n<marketingCodeId></marketingCodeId>\n488<leadSource2ID>Advertisement</leadSource2ID>\n<leadSource3ID>Magazine</leadSource3ID>\n<otherLeadSourceDetail></otherLeadSourceDetail>\n<liquidCapitalMin>10000</liquidCapitalMin>\n<liquidCapitalMax>Yes</liquidCapitalMax>\n<investTimeframe>5</investTimeframe>\n<background>Business</background>\n<sourceOfFunding>Business</sourceOfFunding>\n<nextCallDate>2016-04-04</nextCallDate>\n<division>Division</division>\n<noOfUnitReq>1</noOfUnitReq>\n<locationId1>Yes</locationId1>\n<locationId1b>Yes</locationId1b>\n<locationId2>Yes</locationId2>\n<preferredCity1>Reston</preferredCity1>\n<preferredCountry1>USA</preferredCountry1>\n<preferredStateId1>Albahama</preferredStateId1>\n<preferredCity2>Delhi</preferredCity2>\n<preferredCountry2>India</preferredCountry2>\n<preferredStateId2>Delhi</preferredStateId2>\n<forecastClosureDate>2016-04-06</forecastClosureDate>\n<probability>10</probability>\n<forecastRating>Upside</forecastRating>\n<forecastRevenue>1500</forecastRevenue>\n<basedOnWorkflowAssignmentRule>No</basedOnWorkflowAssignmentRule>\n<campaignID>Welcome Campaign</campaignID>\n<serviceID>Product/Service Update,Newsletters,Offers</serviceID>\n</fsLead>\n</fcRequest>",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FSCreateLead"
              },
              "xml": {
                "name": "fcRequest",
                "wrapped": true
              }
            }
          }
        },
        "description": "Lead Creation object",
        "required": true
      },
      "FSCreateCRMLeadArray": {
        "content": {
          "application/xml": {
            "example": "<?xml version='1.0' encoding='utf-8'?>\n<fcRequest><cmLead><title>Mr.</title>\n<leadFirstName>Shaun</leadFirstName>\n562<leadLastName>Henry</leadLastName>\n<companyName>Company</companyName>\n<primaryContactMethod>Email</primaryContactMethod>\n<ownerTypeValue> CORP</ownerTypeValue>\n<leadOwnerID>Justin Williams</leadOwnerID><franchiseeNo></franchiseeNo>\n<areaID></areaID>\n<divisionID>Division</divisionID>\n<address>Street 1</address>\n<city>New Delhi</city>\n<country>India</country>\n<zipcode>110018</zipcode>\n<state>Delhi</state>\n<phoneNumbers>25252525</phoneNumbers>\n<extn>011</extn>\n<faxNumbers> </faxNumbers>\n<mobileNumbers>9898989898</mobileNumbers>\n<emailIds>shaun.henry@franconnect.com</emailIds>\n<alternateEmail> </alternateEmail>\n<suffix></suffix>\n<position></position>\n<birthdate></birthdate>\n<anniversarydate></anniversarydate>\n<cmLeadTypeID></cmLeadTypeID>\n<cmRatingID>Cold</cmRatingID>\n<cmSource2ID>Advertisement</cmSource2ID>\n<cmSource3ID>Newspaper</cmSource3ID>\n<cmSource1ID>Email</cmSource1ID>\n<bestTimeToContact></bestTimeToContact>\n<comments>Welcome to FC System</comments>\n<serviceID>Product/Service Update, Announcements</serviceID>\n</cmLead>\n</fcRequest>",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FSCreateLead"
              },
              "xml": {
                "name": "fcRequest",
                "wrapped": true
              }
            }
          }
        },
        "description": "Lead Creation object",
        "required": true
      },
      "FSRetrieveLeadArray": {
        "content": {
          "application/xml": {
            "example": "<?xml version='1.0' encoding='utf-8'?>\n<fcRequest>\n<filter>\n<referenceId>1696458950</referenceId>\n<requestDateFrom>2016-11-25</requestDateFrom>\n<requestDateTo>2017-12-25</requestDateTo>\n<leadStatusID op='eq'>NewLead</leadStatusID>\n</filter>\n</fcRequest>",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FSCreateLead"
              },
              "xml": {
                "name": "fcRequest",
                "wrapped": true
              }
            }
          }
        },
        "description": "Lead Retrieval object",
        "required": true
      },
      "FSUpdateLeadArray": {
        "content": {
          "application/xml": {
            "example": "<?xml version='1.0' encoding='utf-8'?>\n<fcRequest>\n<fsLead>\n<referenceId>323234</referenceId>\n<salutation>Mr.</salutation>\n<firstName>Josn</firstName>\n<lastName>Marsh</lastName>\n<address>100 Main St</address>\n<address2></address2>\n<city>Seattle</city>\n<country>USA</country>\n<stateID>Washington</stateID>\n<zip>98102</zip>\n<countyID>Adams</countyID>\n<primaryPhoneToCall>Email</primaryPhoneToCall>\n<bestTimeToContact></bestTimeToContact>\n<phone></phone>\n<phoneExt></phoneExt>\n<homePhone></homePhone>\n765<homePhoneExt></homePhoneExt>\n<fax></fax>\n<mobile></mobile>\n<emailID>support@franconnect.com</emailID>\n<companyName></companyName>\n<comments>Newly added lead in this area</comments>\n<leadStatusID>Deffered</leadStatusID>\n<leadOwnerID>Chris Barlow</leadOwnerID>\n<leadRatingID>Warm</leadRatingID>\n<marketingCodeId></marketingCodeId>\n<leadSource2ID>Advertisement</leadSource2ID>\n<leadSource3ID>Magazine</leadSource3ID>\n<otherLeadSourceDetail></otherLeadSourceDetail>\n<liquidCapitalMin>10000</liquidCapitalMin>\n<liquidCapitalMax>50000</liquidCapitalMax>\n<investTimeframe>5</investTimeframe>\n<background>Business</background>\n<sourceOfFunding>Business</sourceOfFunding>\n<nextCallDate>2016-04-04</nextCallDate>\n<division>Division</division>\n<noOfUnitReq>2</noOfUnitReq>\n<statusChangeDate>2016-04-04</statusChangeDate>\n<noOfFieldSold>5</noOfFieldSold>\n<dateOfOpen>2016-04-04</dateOfOpen>\n<leadKilledReason></leadKilledReason>\n<leadKilledReasonComment></leadKilledReasonComment>\n<franchiseeAwarded>Yes</franchiseeAwarded>\n<locationId1>From New Available Sites</locationId1>\n<locationId1b>From Existing Sites</locationId1b>\n<locationId2>From Resale Sites</locationId2>\n<preferredCity1>New York City</preferredCity1>\n<preferredCountry1>USA </preferredCountry1>\n<preferredStateId1>New York</preferredStateId1>\n<preferredCity2>Delhi</preferredCity2>\n<preferredCountry2>India</preferredCountry2>\n<preferredStateId2>Delhi</preferredStateId2>\n766<forecastClosureDate>2016-04-06</forecastClosureDate>\n<probability>10</probability>\n<forecastRating>Upside</forecastRating>\n<forecastRevenue>1500</forecastRevenue>\n<unsubscribe>Opt-in</unsubscribe>\n<smsUnsubscribe></smsUnsubscribe>\n<campaignID>Welcome Campaign</campaignID>\n<serviceID>Product/Service Update,Newsletters,Offers</serviceID>\n</fsLead>\n</fcRequest>",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FSCreateLead"
              },
              "xml": {
                "name": "fcRequest",
                "wrapped": true
              }
            }
          }
        },
        "description": "Lead Updation object",
        "required": true
      },
      "FSDeleteLeadArray": {
        "content": {
          "application/xml": {
            "example": "<?xml version='1.0' encoding='utf-8'?>\n<fcRequest>\n<fsLead>\n<referenceId>1661907438</referenceId>\n</fsLead>\n</fcRequest>",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FSCreateLead"
              },
              "xml": {
                "name": "fcRequest",
                "wrapped": true
              }
            }
          }
        },
        "description": "Lead Deletion object",
        "required": true
      },
      "AdminSubModuleArray": {
        "content": {
          "application/xml": {
            "example": "POST /<context-path>/rest/dataservices/submodule HTTP/1.1\nContent-type: application/x-www-form-urlencoded/\nkey=key&module=admin&responseType=XML",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AdminSubModule"
              },
              "xml": {
                "wrapped": true
              }
            }
          }
        },
        "description": "Lead Deletion object",
        "required": true
      },
      "SalesSubModuleArray": {
        "content": {
          "application/xml": {
            "example": "POST /<context-path>/rest/dataservices/submodule HTTP/1.1\nContent-type: application/x-www-form-urlencoded/\nkey=key&module=fs&responseType=XML",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AdminSubModule"
              },
              "xml": {
                "name": "fcRequest",
                "wrapped": true
              }
            }
          }
        },
        "description": "Lead Deletion object",
        "required": true
      },
      "InfoMgrSubModuleArray": {
        "content": {
          "application/xml": {
            "example": "POST /<context-path>/rest/dataservices/submodule HTTP/1.1\nContent-type: application/x-www-form-urlencoded/\nkey=key&module=fim&responseType=XML",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AdminSubModule"
              },
              "xml": {
                "name": "fcRequest",
                "wrapped": true
              }
            }
          }
        },
        "description": "Lead Deletion object",
        "required": true
      },
      "CRMSubModuleArray": {
        "content": {
          "application/xml": {
            "example": "POST /<context-path>/rest/dataservices/submodule HTTP/1.1\nContent-type: application/x-www-form-urlencoded/\nkey=key&module=cm&responseType=XML",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AdminSubModule"
              },
              "xml": {
                "name": "fcRequest",
                "wrapped": true
              }
            }
          }
        },
        "description": "Lead Deletion object",
        "required": true
      }
    },
    "responses": {
      "AdminSubModuleResp": {
        "content": {
          "application/xml": {
            "example": "<?xml version='1.0' encoding='utf-8'?>\n<fcResponse>\n<responseStatus>Success</responseStatus>\n<responseId>1527878235</responseId>\n<responseData><fcRequest>\n<franchisee>Franchisee</franchisee>\n<user>User</user>\n</fcRequest>\n</responseData>\n</fcResponse>"
          }
        },
        "description": "Successful"
      },
      "SalesSubModuleResp": {
        "content": {
          "application/xml": {
            "example": "<?xml version='1.0' encoding='utf-8'?>\n<fcResponse>\n<responseStatus>Success</responseStatus>\n<responseId>1449885839</responseId>\n<responseData>\n<fcRequest>\n<addlContact>Co-Applicants</addlContact>\n<call>Call</call>\n<compliance>Compliance</compliance>\n<lead>Primary Info</lead>\n<mail>Emails</mail>\n<personalProfile>Personal Profile</personalProfile>\n<qualification>Qualification Details</qualification>\n<realEstate>Real Estate</realEstate>\n<remark>Remark</remark>\n<statusChangeHistory>Status Change History</statusChangeHistory>\n<task>Task</task>\n<visit>Visit</visit>\n</fcRequest>\n</responseData>\n</fcResponse>"
          }
        },
        "description": "Successful"
      },
      "InfoMgrSubModuleResp": {
        "content": {
          "application/xml": {
            "example": "<?xml version='1.0' encoding='utf-8'?>\n<fcResponse>\n<fcResponse>\n<responseStatus>Success</responseStatus>\n<responseId>1449885839</responseId>\n<responseData>\n<fcRequest>\n<agreement>Agreement</agreement>\n<auditFieldHistory>Field Audit History</auditFieldHistory>\n<auditFormHistory>Form Audit History</auditFormHistory>\n<call>Call</call>\n<centerInfo>Center Info</centerInfo>\n<complaint>Customer Complaints</complaint>\n<contractSigning>Contract Signing</contractSigning>\n<employee>Employees</employee>\n<entity>Entity Details</entity>\n<event>Events</event>\n<financial>Financial</financial>\n<franchisee>Franchisee</franchisee>\n<guarantor>Guarantors</guarantor>\n<insurance>Insurance</insurance>\n<legalViolation>Legal Violation</legalViolation>\n<lender>Lenders</lender>\n<mail>External Mail</mail>\n<marketing>Marketing</marketing>\n<mysteryReview>Mystery Review</mysteryReview>\n<outlookMail>Outlook Emails</outlookMail>\n<owner>Owners</owner>\n<qa>QA History</qa>\n<realEstate>Real Estate</realEstate>\n<remark>Remark</remark>\n<renewal>Renewal</renewal>\n<task>Task</task>\n<termination>Default and Termination</termination>\n<territory>Territory</territory>\n<training>Training</training>\n</fcRequest>\n</responseData>\n</fcResponse>"
          }
        },
        "description": "Successful"
      },
      "CRMSubModuleResp": {
        "content": {
          "application/xml": {
            "example": "<?xml version='1.0' encoding='utf-8'?>\n<fcResponse>\n<fcResponse>\n<responseStatus>Success</responseStatus>\n<responseId>165173566</responseId>\n<responseData>\n<fcRequest>\n<account>Account Info</account>\n<accountRemark>Account - Remarks</accountRemark>\n<call>CM - Call</call>\n<category>Product Category</category>\n<contact>Primary Info</contact>\n<contactStatusChangeHistory>Contact StatusChangeHistory</contactStatusChangeHistory>\n<lead>Lead Info</lead>\n<leadCall>Lead - Call</leadCall>\n<leadMail>Lead Email</leadMail><leadOutlookMail>Lead Outlook Emails</leadOutlookMail>\n<leadRemark>Lead - Remarks</leadRemark>\n<leadStatusChangeHistory>Lead Status Change History</leadStatusChangeHistory>\n<leadTask>Lead - Task</leadTask>\n<leadToContactConversion>Lead Conversion</leadToContactConversion>\n<mail>Email</mail>\n<opportunity>Opportunity Information</opportunity>\n<opportunityCall>Opportunity - Call</opportunityCall>\n<opportunityRemark>Opportunity - Remarks</opportunityRemark>\n<opportunityTask>Opportunity - Task</opportunityTask>\n<otherAddress>Other Address</otherAddress>\n<outlookMail>Outlook Emails</outlookMail>\n<product>Product / Service</product>\n<remark>CM - Remarks</remark>\n<stageChangeHistory>Opportunity Stage Change History</stageChangeHistory>\n<task>CM - Task</task>\n<transaction>Transaction</transaction>\n</fcRequest>\n</responseData>\n</fcResponse>"
          }
        },
        "description": "Successful"
      }
    }
  }
}
